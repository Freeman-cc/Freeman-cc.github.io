<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cc&#39;s Blog</title>
  
  <subtitle>Welcome to my blog, have a nice day!</subtitle>
  <link href="https://freeman-cc.github.io/atom.xml" rel="self"/>
  
  <link href="https://freeman-cc.github.io/"/>
  <updated>2022-04-10T06:07:37.432Z</updated>
  <id>https://freeman-cc.github.io/</id>
  
  <author>
    <name>Cc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CNSSÊãõÊñ∞È¢ò-2021-crypto-writeup</title>
    <link href="https://freeman-cc.github.io/2022/04/10/CNSS%E6%8B%9B%E6%96%B0%E9%A2%98-2021-crypto-writeup/"/>
    <id>https://freeman-cc.github.io/2022/04/10/CNSS%E6%8B%9B%E6%96%B0%E9%A2%98-2021-crypto-writeup/</id>
    <published>2022-04-10T06:04:41.000Z</published>
    <updated>2022-04-10T06:07:37.432Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="CNSSÊãõÊñ∞È¢ò-crypto-writeup"   >          <a href="#CNSSÊãõÊñ∞È¢ò-crypto-writeup" class="heading-link"><i class="fas fa-link"></i></a><a href="#CNSSÊãõÊñ∞È¢ò-crypto-writeup" class="headerlink" title="CNSSÊãõÊñ∞È¢ò-crypto-writeup"></a>CNSSÊãõÊñ∞È¢ò-crypto-writeup</h1>      <blockquote><p>Ccc</p></blockquote>        <h3 id="üòã-Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å-I"   >          <a href="#üòã-Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å-I" class="heading-link"><i class="fas fa-link"></i></a><a href="#üòã-Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å-I" class="headerlink" title="[üòã] Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å I"></a>[üòã] Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å I</h3>      <p>ÂÖàË¥¥‰ª£Á†Å</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">a = <span class="number">10499958999037877045860819145654592139531258013786800315952660437695953206118177802362538707257147839843929607571065996701775308516344320494492623326535070933404552245238889019529867495706219558537483959855018656456767601472852530792072968424254995263689863458109858200434368660199825370006622972172615283000225895986795432100524830372657448639751748649746517567275491877758341825114165092719349624453145256163927226959292249202574111889453838454722039</span></span><br><span class="line">n = <span class="number">24482146465492008075985247474612414320648047425785643838292024343856484727961531014143038475016832753633643464040872815615028679515938203288641456487330618969964445990607887042678786725649115551121279019558561466028015891949399125083811735238746137986294864917479675168130071009961552443914582290960081092498541343026165888900247802180370535720495152921978143267961988522304615862013752399728187062523671938698800778472385717512452760615330027345844283</span></span><br><span class="line">b = <span class="number">13974352443151</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"><span class="keyword">if</span>(a*i%n==b):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">flag = <span class="string">b&#x27;cnss&#123;&#x27;</span>+long_to_bytes(i)+<span class="string">&#x27;&#125;&#x27;</span></span><br></pre></td></tr></table></div></figure><p>Ê±ÇÈÄÜÔºåÂà©Áî®Êâ©Â±ïÊ¨ßÂá†ÈáåÂæóÁÆóÊ≥ïÊ±ÇËß£Âç≥ÂèØ</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ext_gcd</span>(<span class="params">a, b</span>):  <span class="comment"># Êâ©Â±ïÊ¨ßÂá†ÈáåÂæóÁÆóÊ≥ï</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x, y, gcd = ext_gcd(b, a % b)  <span class="comment"># ÈÄíÂΩíÁõ¥Ëá≥‰ΩôÊï∞Á≠â‰∫é0(ÈúÄÂ§öÈÄíÂΩí‰∏ÄÂ±ÇÁî®Êù•Âà§Êñ≠)</span></span><br><span class="line">        x, y = y, (x - (a // b) * y)  <span class="comment"># ËæóËΩ¨Áõ∏Èô§Ê≥ïÂèçÂêëÊé®ÂØºÊØèÂ±Ça„ÄÅbÁöÑÂõ†Â≠ê‰ΩøÂæógcd(a,b)=ax+byÊàêÁ´ã</span></span><br><span class="line">        <span class="keyword">return</span> x, y, gcd</span><br><span class="line"></span><br><span class="line">a = <span class="number">10499958999037877045860819145654592139531258013786800315952660437695953206118177802362538707257147839843929607571065996701775308516344320494492623326535070933404552245238889019529867495706219558537483959855018656456767601472852530792072968424254995263689863458109858200434368660199825370006622972172615283000225895986795432100524830372657448639751748649746517567275491877758341825114165092719349624453145256163927226959292249202574111889453838454722039</span></span><br><span class="line">n = <span class="number">24482146465492008075985247474612414320648047425785643838292024343856484727961531014143038475016832753633643464040872815615028679515938203288641456487330618969964445990607887042678786725649115551121279019558561466028015891949399125083811735238746137986294864917479675168130071009961552443914582290960081092498541343026165888900247802180370535720495152921978143267961988522304615862013752399728187062523671938698800778472385717512452760615330027345844283</span></span><br><span class="line">b = <span class="number">13974352443151</span></span><br><span class="line"></span><br><span class="line">d = ext_gcd(a, n)[<span class="number">0</span>]</span><br><span class="line">i = b*d % n</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cnss&#123;&quot;</span> + long_to_bytes(i).decode() + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>ÂæóÂà∞flag</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnss&#123;you yi ge ren qian lai mai gua. lue lue lue lue lue. sa ri lang, sa ri lang. ei, hua qiang, hua qiang&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="üòã-Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å-II"   >          <a href="#üòã-Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å-II" class="heading-link"><i class="fas fa-link"></i></a><a href="#üòã-Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å-II" class="headerlink" title="[üòã] Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å II"></a>[üòã] Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å II</h3>      <p>ÂÖàË¥¥‰ª£Á†Å</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line">num = <span class="number">42884020547169390364057708512857160494285905714049130207174574321294001570717794624065180823944268300615872241601579039570417514768021539120794827687319577302185669966605784385135475359835440522138098740956869698753641542827169807498060060203204623056652296548672193678604201527271552258183411014527366217548194668469156210293296924920396661175084847772705813725399053734267798263155285086152337660486536186646844672457165552673635686438518233777750910982014487846162409685706645584022613739678475494110418588076015804320630926293482802728176941310074063709832881421592093809601385355979927053037564815022569532301725889642648753691270079271760325794402609541247330395378653665694056501747438163292250560881807911461231726101015329450977148586716650828721964825603783645451441758913032780302842678209454303821607654073090650401139540242325808963472494771631432989047762098809264580664019379523293624441137658106554812934798531301113822034790852090529061101693937747989599304386879458074169786212163676139153571980665024887827190167719665028793495590181448050849517686984259984456749798664352548534304800162670309538117876068852938462001997080070145586746296815514664296506732662997084432462415745714170644890474456380187175650685331337577272850596655499330349676234958852437039128355237654047269</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,num):</span><br><span class="line"><span class="keyword">if</span> gcd(i,num) == <span class="number">1</span>:</span><br><span class="line">cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">flag = md5(<span class="built_in">str</span>(cnt).encode()).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Flag is cnss&#123;&#x27;</span> + flag <span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></div></figure><p>Ê±Ç $1$ Âà∞ $num-1$ ‰∏≠‰∏é $num$ ‰∫íÁ¥†ÁöÑÂÖÉÁ¥†ÁöÑÂíåÔºå‰πüÂ∞±ÊòØÊ±Ç $num$ ÁöÑÊ¨ßÊãâÂáΩÊï∞ÂÄºÔºåÂ∞Ü $num$ Ë¥®Âõ†Êï∞ÂàÜËß£ÂêéÂà©Áî®ÂÖ¨ÂºèÊ±ÇËß£Âç≥ÂèØ</p><p>ÂØπ $num$ ËøõË°åË¥®Âõ†Êï∞Êó∂ $factordb$ ‰∏çÁÆ°Áî®‰∫ÜÔºåÂà©Áî®‰∏Ä‰∏ã‰ª£Á†ÅÂàÜËß£</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Âà§Êñ≠ËæìÂÖ•ÊòØÂê¶‰∏∫Á¥†Êï∞</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>&#125;:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">or</span> n % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> n % <span class="number">5</span> == <span class="number">0</span> <span class="keyword">or</span> n % <span class="number">7</span> == <span class="number">0</span> <span class="keyword">or</span> n % <span class="number">11</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    u = n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> u % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">        u //= <span class="number">2</span></span><br><span class="line">    a = random.randint(<span class="number">2</span>, n - <span class="number">1</span>)</span><br><span class="line">    r = <span class="built_in">pow</span>(a, u, n)</span><br><span class="line">    <span class="keyword">if</span> r != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">while</span> t &gt; <span class="number">1</span> <span class="keyword">and</span> r != n - <span class="number">1</span>:</span><br><span class="line">            r = (r * r) % n</span><br><span class="line">            t -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> r != n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ÂØªÊâæËæìÂÖ•ÁöÑ‰∏Ä‰∏™Âõ†Êï∞</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">n, a</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> (x * x + a) % n</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Ë°•‰∏äÂõ†Â≠ê‰∏∫2ÁöÑÂà§ÂÆö</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    x1 = random.randint(<span class="number">0</span>, n)</span><br><span class="line">    x2 = x1</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x1 = f(x1)</span><br><span class="line">        x2 = f(f(x2))</span><br><span class="line">        p = math.gcd(<span class="built_in">abs</span>(x2 - x1), n)</span><br><span class="line">        <span class="keyword">if</span> p &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">        <span class="keyword">if</span> x1 == x2:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factor_n</span>(<span class="params">num</span>):</span><br><span class="line">    prime_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> num != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> prime(num):</span><br><span class="line">            prime_list.append(num)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c = find(num, random.randint(<span class="number">0</span>, num - <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> prime(c):</span><br><span class="line">                prime_list.append(c)</span><br><span class="line">                num //= c</span><br><span class="line">    prime_list.sort()</span><br><span class="line">    <span class="keyword">return</span> prime_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    num = <span class="number">42884020547169390364057708512857160494285905714049130207174574321294001570717794624065180823944268300615872241601579039570417514768021539120794827687319577302185669966605784385135475359835440522138098740956869698753641542827169807498060060203204623056652296548672193678604201527271552258183411014527366217548194668469156210293296924920396661175084847772705813725399053734267798263155285086152337660486536186646844672457165552673635686438518233777750910982014487846162409685706645584022613739678475494110418588076015804320630926293482802728176941310074063709832881421592093809601385355979927053037564815022569532301725889642648753691270079271760325794402609541247330395378653665694056501747438163292250560881807911461231726101015329450977148586716650828721964825603783645451441758913032780302842678209454303821607654073090650401139540242325808963472494771631432989047762098809264580664019379523293624441137658106554812934798531301113822034790852090529061101693937747989599304386879458074169786212163676139153571980665024887827190167719665028793495590181448050849517686984259984456749798664352548534304800162670309538117876068852938462001997080070145586746296815514664296506732662997084432462415745714170644890474456380187175650685331337577272850596655499330349676234958852437039128355237654047269</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num&#125;</span>=&#x27;</span>)</span><br><span class="line">    prime_list = factor_n(num)</span><br><span class="line">    <span class="built_in">print</span>(prime_list)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, prime_list)))</span><br><span class="line"></span><br><span class="line">    end = time.process_time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Running time: <span class="subst">&#123;end - start&#125;</span> Seconds&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></div></figure><p>ÂæóÂà∞ÂàÜËß£ÁªìÊûúÂ¶Ç‰∏ã</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">726469</span>, <span class="number">726469</span>, <span class="number">726469</span>, <span class="number">726469</span>, <span class="number">726469</span>, <span class="number">1248059</span>, <span class="number">1248059</span>, <span class="number">1248059</span>, <span class="number">1248059</span>, <span class="number">1248059</span>, <span class="number">1248059</span>, <span class="number">3488777</span>, <span class="number">3488777</span>, <span class="number">3488777</span>, <span class="number">3488777</span>, <span class="number">3488777</span>, <span class="number">3488777</span>, <span class="number">4003333</span>, <span class="number">4003333</span>, <span class="number">4003333</span>, <span class="number">4003333</span>, <span class="number">4003333</span>, <span class="number">4003333</span>, <span class="number">4003333</span>, <span class="number">7324349</span>, <span class="number">7324349</span>, <span class="number">7324349</span>, <span class="number">7324349</span>, <span class="number">7324349</span>, <span class="number">7324349</span>, <span class="number">7324349</span>, <span class="number">7324349</span>, <span class="number">7324349</span>, <span class="number">13943177</span>, <span class="number">13943177</span>, <span class="number">13943177</span>, <span class="number">13943177</span>, <span class="number">13943177</span>, <span class="number">13943177</span>, <span class="number">14429917</span>, <span class="number">14429917</span>, <span class="number">14429917</span>, <span class="number">14429917</span>, <span class="number">14429917</span>, <span class="number">14429917</span>, <span class="number">14429917</span>, <span class="number">14429917</span>, <span class="number">14429917</span>, <span class="number">14429917</span>, <span class="number">40264613</span>, <span class="number">40264613</span>, <span class="number">40264613</span>, <span class="number">40264613</span>, <span class="number">40264613</span>, <span class="number">40264613</span>, <span class="number">40264613</span>, <span class="number">40264613</span>, <span class="number">40264613</span>, <span class="number">40264613</span>, <span class="number">117077309</span>, <span class="number">117077309</span>, <span class="number">117077309</span>, <span class="number">117077309</span>, <span class="number">117077309</span>, <span class="number">416211353</span>, <span class="number">416211353</span>, <span class="number">416211353</span>, <span class="number">416211353</span>, <span class="number">416211353</span>, <span class="number">416211353</span>, <span class="number">416211353</span>, <span class="number">416211353</span>, <span class="number">416211353</span>, <span class="number">925020799</span>, <span class="number">925020799</span>, <span class="number">925020799</span>, <span class="number">925020799</span>, <span class="number">925020799</span>, <span class="number">925020799</span>, <span class="number">925020799</span>, <span class="number">925020799</span>, <span class="number">925020799</span>, <span class="number">1291513693</span>, <span class="number">1291513693</span>, <span class="number">1291513693</span>, <span class="number">1291513693</span>, <span class="number">1291513693</span>, <span class="number">1291513693</span>, <span class="number">1291513693</span>, <span class="number">1291513693</span>, <span class="number">1291513693</span>, <span class="number">1291513693</span>, <span class="number">4297172359</span>, <span class="number">4297172359</span>, <span class="number">4297172359</span>, <span class="number">4297172359</span>, <span class="number">4297172359</span>, <span class="number">4297172359</span>, <span class="number">4297172359</span>, <span class="number">6945055903</span>, <span class="number">6945055903</span>, <span class="number">6945055903</span>, <span class="number">6945055903</span>, <span class="number">6945055903</span>, <span class="number">6945055903</span>, <span class="number">6945055903</span>, <span class="number">6945055903</span>, <span class="number">14980192757</span>, <span class="number">14980192757</span>, <span class="number">14980192757</span>, <span class="number">14980192757</span>, <span class="number">14980192757</span>, <span class="number">14980192757</span>, <span class="number">31896490931</span>, <span class="number">31896490931</span>, <span class="number">31896490931</span>, <span class="number">31896490931</span>, <span class="number">31896490931</span>, <span class="number">31896490931</span>, <span class="number">31896490931</span>, <span class="number">31896490931</span>, <span class="number">34448261957</span>, <span class="number">34448261957</span>, <span class="number">34448261957</span>, <span class="number">34448261957</span>, <span class="number">34448261957</span>, <span class="number">34448261957</span>, <span class="number">34448261957</span>, <span class="number">34448261957</span>, <span class="number">34448261957</span>, <span class="number">42273263297</span>, <span class="number">42273263297</span>, <span class="number">42273263297</span>, <span class="number">42273263297</span>, <span class="number">42273263297</span>, <span class="number">334972370143</span>, <span class="number">334972370143</span>, <span class="number">334972370143</span>, <span class="number">334972370143</span>, <span class="number">334972370143</span>, <span class="number">334972370143</span>, <span class="number">409576292549</span>, <span class="number">409576292549</span>, <span class="number">409576292549</span>, <span class="number">409576292549</span>, <span class="number">409576292549</span>, <span class="number">409576292549</span>, <span class="number">409576292549</span>, <span class="number">409576292549</span>]</span><br></pre></td></tr></table></div></figure><p>Êé•‰∏ãÊù•Âà©Áî®Ê¨ßÊãâÂáΩÊï∞Ê±ÇËß£Âç≥ÂèØ</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;726469&#x27;</span>, <span class="string">&#x27;726469&#x27;</span>, <span class="string">&#x27;726469&#x27;</span>, <span class="string">&#x27;726469&#x27;</span>, <span class="string">&#x27;726469&#x27;</span>, <span class="string">&#x27;1248059&#x27;</span>, <span class="string">&#x27;1248059&#x27;</span>, <span class="string">&#x27;1248059&#x27;</span>, <span class="string">&#x27;1248059&#x27;</span>, <span class="string">&#x27;1248059&#x27;</span>, <span class="string">&#x27;1248059&#x27;</span>, <span class="string">&#x27;3488777&#x27;</span>, <span class="string">&#x27;3488777&#x27;</span>, <span class="string">&#x27;3488777&#x27;</span>, <span class="string">&#x27;3488777&#x27;</span>, <span class="string">&#x27;3488777&#x27;</span>, <span class="string">&#x27;3488777&#x27;</span>, <span class="string">&#x27;4003333&#x27;</span>, <span class="string">&#x27;4003333&#x27;</span>, <span class="string">&#x27;4003333&#x27;</span>, <span class="string">&#x27;4003333&#x27;</span>, <span class="string">&#x27;4003333&#x27;</span>, <span class="string">&#x27;4003333&#x27;</span>, <span class="string">&#x27;4003333&#x27;</span>, <span class="string">&#x27;7324349&#x27;</span>, <span class="string">&#x27;7324349&#x27;</span>, <span class="string">&#x27;7324349&#x27;</span>, <span class="string">&#x27;7324349&#x27;</span>, <span class="string">&#x27;7324349&#x27;</span>, <span class="string">&#x27;7324349&#x27;</span>, <span class="string">&#x27;7324349&#x27;</span>, <span class="string">&#x27;7324349&#x27;</span>, <span class="string">&#x27;7324349&#x27;</span>, <span class="string">&#x27;13943177&#x27;</span>, <span class="string">&#x27;13943177&#x27;</span>, <span class="string">&#x27;13943177&#x27;</span>, <span class="string">&#x27;13943177&#x27;</span>, <span class="string">&#x27;13943177&#x27;</span>, <span class="string">&#x27;13943177&#x27;</span>, <span class="string">&#x27;14429917&#x27;</span>, <span class="string">&#x27;14429917&#x27;</span>, <span class="string">&#x27;14429917&#x27;</span>, <span class="string">&#x27;14429917&#x27;</span>, <span class="string">&#x27;14429917&#x27;</span>, <span class="string">&#x27;14429917&#x27;</span>, <span class="string">&#x27;14429917&#x27;</span>, <span class="string">&#x27;14429917&#x27;</span>, <span class="string">&#x27;14429917&#x27;</span>, <span class="string">&#x27;14429917&#x27;</span>, <span class="string">&#x27;40264613&#x27;</span>, <span class="string">&#x27;40264613&#x27;</span>, <span class="string">&#x27;40264613&#x27;</span>, <span class="string">&#x27;40264613&#x27;</span>, <span class="string">&#x27;40264613&#x27;</span>, <span class="string">&#x27;40264613&#x27;</span>, <span class="string">&#x27;40264613&#x27;</span>, <span class="string">&#x27;40264613&#x27;</span>, <span class="string">&#x27;40264613&#x27;</span>, <span class="string">&#x27;40264613&#x27;</span>, <span class="string">&#x27;117077309&#x27;</span>, <span class="string">&#x27;117077309&#x27;</span>, <span class="string">&#x27;117077309&#x27;</span>, <span class="string">&#x27;117077309&#x27;</span>, <span class="string">&#x27;117077309&#x27;</span>, <span class="string">&#x27;416211353&#x27;</span>, <span class="string">&#x27;416211353&#x27;</span>, <span class="string">&#x27;416211353&#x27;</span>, <span class="string">&#x27;416211353&#x27;</span>, <span class="string">&#x27;416211353&#x27;</span>, <span class="string">&#x27;416211353&#x27;</span>, <span class="string">&#x27;416211353&#x27;</span>, <span class="string">&#x27;416211353&#x27;</span>, <span class="string">&#x27;416211353&#x27;</span>, <span class="string">&#x27;925020799&#x27;</span>, <span class="string">&#x27;925020799&#x27;</span>, <span class="string">&#x27;925020799&#x27;</span>, <span class="string">&#x27;925020799&#x27;</span>, <span class="string">&#x27;925020799&#x27;</span>, <span class="string">&#x27;925020799&#x27;</span>, <span class="string">&#x27;925020799&#x27;</span>, <span class="string">&#x27;925020799&#x27;</span>, <span class="string">&#x27;925020799&#x27;</span>, <span class="string">&#x27;1291513693&#x27;</span>, <span class="string">&#x27;1291513693&#x27;</span>, <span class="string">&#x27;1291513693&#x27;</span>, <span class="string">&#x27;1291513693&#x27;</span>, <span class="string">&#x27;1291513693&#x27;</span>, <span class="string">&#x27;1291513693&#x27;</span>, <span class="string">&#x27;1291513693&#x27;</span>, <span class="string">&#x27;1291513693&#x27;</span>, <span class="string">&#x27;1291513693&#x27;</span>, <span class="string">&#x27;1291513693&#x27;</span>, <span class="string">&#x27;4297172359&#x27;</span>, <span class="string">&#x27;4297172359&#x27;</span>, <span class="string">&#x27;4297172359&#x27;</span>, <span class="string">&#x27;4297172359&#x27;</span>, <span class="string">&#x27;4297172359&#x27;</span>, <span class="string">&#x27;4297172359&#x27;</span>, <span class="string">&#x27;4297172359&#x27;</span>, <span class="string">&#x27;6945055903&#x27;</span>, <span class="string">&#x27;6945055903&#x27;</span>, <span class="string">&#x27;6945055903&#x27;</span>, <span class="string">&#x27;6945055903&#x27;</span>, <span class="string">&#x27;6945055903&#x27;</span>, <span class="string">&#x27;6945055903&#x27;</span>, <span class="string">&#x27;6945055903&#x27;</span>, <span class="string">&#x27;6945055903&#x27;</span>, <span class="string">&#x27;14980192757&#x27;</span>, <span class="string">&#x27;14980192757&#x27;</span>, <span class="string">&#x27;14980192757&#x27;</span>, <span class="string">&#x27;14980192757&#x27;</span>, <span class="string">&#x27;14980192757&#x27;</span>, <span class="string">&#x27;14980192757&#x27;</span>, <span class="string">&#x27;31896490931&#x27;</span>, <span class="string">&#x27;31896490931&#x27;</span>, <span class="string">&#x27;31896490931&#x27;</span>, <span class="string">&#x27;31896490931&#x27;</span>, <span class="string">&#x27;31896490931&#x27;</span>, <span class="string">&#x27;31896490931&#x27;</span>, <span class="string">&#x27;31896490931&#x27;</span>, <span class="string">&#x27;31896490931&#x27;</span>, <span class="string">&#x27;34448261957&#x27;</span>, <span class="string">&#x27;34448261957&#x27;</span>, <span class="string">&#x27;34448261957&#x27;</span>, <span class="string">&#x27;34448261957&#x27;</span>, <span class="string">&#x27;34448261957&#x27;</span>, <span class="string">&#x27;34448261957&#x27;</span>, <span class="string">&#x27;34448261957&#x27;</span>, <span class="string">&#x27;34448261957&#x27;</span>, <span class="string">&#x27;34448261957&#x27;</span>, <span class="string">&#x27;42273263297&#x27;</span>, <span class="string">&#x27;42273263297&#x27;</span>, <span class="string">&#x27;42273263297&#x27;</span>, <span class="string">&#x27;42273263297&#x27;</span>, <span class="string">&#x27;42273263297&#x27;</span>, <span class="string">&#x27;334972370143&#x27;</span>, <span class="string">&#x27;334972370143&#x27;</span>, <span class="string">&#x27;334972370143&#x27;</span>, <span class="string">&#x27;334972370143&#x27;</span>, <span class="string">&#x27;334972370143&#x27;</span>, <span class="string">&#x27;334972370143&#x27;</span>, <span class="string">&#x27;409576292549&#x27;</span>, <span class="string">&#x27;409576292549&#x27;</span>, <span class="string">&#x27;409576292549&#x27;</span>, <span class="string">&#x27;409576292549&#x27;</span>, <span class="string">&#x27;409576292549&#x27;</span>, <span class="string">&#x27;409576292549&#x27;</span>, <span class="string">&#x27;409576292549&#x27;</span>, <span class="string">&#x27;409576292549&#x27;</span>]</span><br><span class="line">s = <span class="number">1</span></span><br><span class="line">n = <span class="number">42884020547169390364057708512857160494285905714049130207174574321294001570717794624065180823944268300615872241601579039570417514768021539120794827687319577302185669966605784385135475359835440522138098740956869698753641542827169807498060060203204623056652296548672193678604201527271552258183411014527366217548194668469156210293296924920396661175084847772705813725399053734267798263155285086152337660486536186646844672457165552673635686438518233777750910982014487846162409685706645584022613739678475494110418588076015804320630926293482802728176941310074063709832881421592093809601385355979927053037564815022569532301725889642648753691270079271760325794402609541247330395378653665694056501747438163292250560881807911461231726101015329450977148586716650828721964825603783645451441758913032780302842678209454303821607654073090650401139540242325808963472494771631432989047762098809264580664019379523293624441137658106554812934798531301113822034790852090529061101693937747989599304386879458074169786212163676139153571980665024887827190167719665028793495590181448050849517686984259984456749798664352548534304800162670309538117876068852938462001997080070145586746296815514664296506732662997084432462415745714170644890474456380187175650685331337577272850596655499330349676234958852437039128355237654047269</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    s *= <span class="built_in">int</span>(i)</span><br><span class="line"></span><br><span class="line">nb = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> nb:</span><br><span class="line">        nb.append(i)</span><br><span class="line"><span class="built_in">print</span>(nb)</span><br><span class="line"></span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> nb:</span><br><span class="line">    phi *= n - n//<span class="built_in">int</span>(i)</span><br><span class="line"></span><br><span class="line">phi = phi//(n**(<span class="built_in">len</span>(nb)-<span class="number">1</span>))</span><br><span class="line">flag = <span class="string">&quot;cnss&#123;&quot;</span> + md5(<span class="built_in">str</span>(phi).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(phi)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(s == n)</span><br></pre></td></tr></table></div></figure><p>ÂæóÂà∞flag</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnss&#123;7b4a23cf05fc166e2f5e6798d737cb83&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="üòã-EZRSA"   >          <a href="#üòã-EZRSA" class="heading-link"><i class="fas fa-link"></i></a><a href="#üòã-EZRSA" class="headerlink" title="[üòã] EZRSA"></a>[üòã] EZRSA</h3>      <p>‰ª£Á†Å</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,getPrime</span><br><span class="line"></span><br><span class="line">flag = <span class="string">u&#x27;xxxxxx&#x27;</span></span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#17122915166265113628936084259612311876364779252333817653908064563012403283413723801149226058776045562431863561527598029708484050735340376592692944196636066937254842628374596659520832392883941088961925998112268354069528298108259950738233300271339429579172788606259082714089126140552788081701431773946954101521880287079138683872063436125499187482930254182605546821908768554127091588674102227605591868183216588952297634056187432224500652151699978753316630287127751214117068167697654397115835061787620207935678045116272234790320727737354518224845334305441037073149880267837099939565780539222758100209016162314144630920799</span></span><br><span class="line"><span class="comment">#16926458617386458077637050106018850896006879092288192701331681605474802210713231004923465605065133301881405183688853792875133217926741592214428875953305593414362683885848278980412814134018268287018200015497631362139676275057736654215717198437649465165438442373537289011460247398965575656801213891887710880496787600356785377725103473390014610976378061619695088235473509</span></span><br></pre></td></tr></table></div></figure><p>Ê≥®ÊÑèÂà∞Âä†ÂØÜÊåáÊï∞ $e=3$ ÔºåÁõ¥Êé•Â∞ùËØïÂØπ $c+kn$ ÂºÄÁ´ãÊñπÔºåÂ∞ùËØïÂèëÁé∞ $ k=0 $ Êó∂Â∞±ÂèØ‰ª•ÂæóÂà∞flag</p><p>Ëß£ÂØÜ‰ª£Á†ÅÂ¶Ç‰∏ã</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c = <span class="number">16926458617386458077637050106018850896006879092288192701331681605474802210713231004923465605065133301881405183688853792875133217926741592214428875953305593414362683885848278980412814134018268287018200015497631362139676275057736654215717198437649465165438442373537289011460247398965575656801213891887710880496787600356785377725103473390014610976378061619695088235473509</span></span><br><span class="line">n = <span class="number">17122915166265113628936084259612311876364779252333817653908064563012403283413723801149226058776045562431863561527598029708484050735340376592692944196636066937254842628374596659520832392883941088961925998112268354069528298108259950738233300271339429579172788606259082714089126140552788081701431773946954101521880287079138683872063436125499187482930254182605546821908768554127091588674102227605591868183216588952297634056187432224500652151699978753316630287127751214117068167697654397115835061787620207935678045116272234790320727737354518224845334305441037073149880267837099939565780539222758100209016162314144630920799</span></span><br><span class="line"></span><br><span class="line">status = gmpy2.iroot(c, <span class="number">3</span>)[<span class="number">1</span>] <span class="comment">#status‰∏∫1Ë°®Á§∫ÊîπÊï∞ËÉΩË¢´ÂºÄÁ´ãÊñπÊàêÊï¥Êï∞</span></span><br><span class="line">rootnumber = gmpy2.iroot(c, <span class="number">3</span>)[<span class="number">0</span>] <span class="comment">#ÂºÄÁ´ãÊñπÂêéÁöÑÁªìÊûú</span></span><br><span class="line"><span class="built_in">print</span>(rootnumber)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(rootnumber).decode())</span><br></pre></td></tr></table></div></figure><p>ÂæóÂà∞flagÔºö</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnss&#123;Èù¢ÂØπÊÅêÊÉßÁöÑÊúÄÂ•ΩÂäûÊ≥ïÂ∞±ÊòØÊ∂àÈô§ÊÅêÊÉß&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="üòã-True-Random"   >          <a href="#üòã-True-Random" class="heading-link"><i class="fas fa-link"></i></a><a href="#üòã-True-Random" class="headerlink" title="[üòã] True Random"></a>[üòã] True Random</h3>      <p>‰ª£Á†ÅÂ¶Ç‰∏ã</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;cnss&#123;......&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">seeds = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag)):</span><br><span class="line">    seeds.append(random.randint(<span class="number">0</span>, <span class="number">10000</span>))</span><br><span class="line"></span><br><span class="line">res = [<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag)):</span><br><span class="line">    random.seed(seeds[i])</span><br><span class="line">    rands = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        rands.append(random.randint(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">    res.append(<span class="built_in">ord</span>(flag[i]) ^ rands[i % <span class="number">4</span>] ^ res[i])</span><br><span class="line">    <span class="keyword">del</span> rands[i % <span class="number">4</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(rands))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(seeds)</span><br><span class="line"><span class="built_in">print</span>(res[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment">#[6756, 949, 8167, 2246, 9307, 4748, 9651, 1460, 3867, 5744, 5815, 713, 1057, 5614, 4024, 8075, 3862, 732, 279, 5308, 7815, 2251, 5533, 6324, 6786, 8549, 4421, 6651, 7409, 4880, 6246, 1249, 192, 4099, 1704, 3678, 7520, 1378, 2642, 9154, 5690, 8621, 1717, 4992, 8903, 1608, 3214, 2565, 3146, 2521, 2070, 1047, 5784, 8682, 1057, 1091, 8655, 2957, 8591, 1284, 9162, 2974, 9395]</span></span><br><span class="line"><span class="comment">#[8, 221, 50, 176, 21, 79, 19, 208, 117, 8, 51, 171, 156, 247, 101, 60, 46, 152, 162, 182, 29, 16, 102, 154, 22, 117, 65, 21, 121, 197, 170, 2, 217, 118, 201, 15, 132, 246, 21, 1, 250, 7, 45, 130, 124, 231, 200, 103, 7, 63, 86, 159, 211, 168, 82, 11, 60, 173, 209, 168, 191, 255, 101]</span></span><br><span class="line"><span class="comment">#[245, 9, 243] [172, 160, 136] [23, 160, 158] [22, 128, 253] [43, 4, 130] [99, 42, 16] [171, 168, 108] [196, 148, 162] [229, 40, 88] [131, 92, 63] [194, 214, 44] [199, 145, 186] [210, 183, 113] [53, 244, 60] [177, 17, 151] [138, 188, 113] [129, 43, 241] [61, 127, 37] [210, 181, 250] [42, 226, 165] [104, 249, 247] [23, 153, 232] [156, 114, 5] [134, 65, 64] [225, 236, 36] [88, 14, 254] [232, 68, 58] [37, 197, 70] [126, 199, 207] [73, 0, 249] [91, 228, 182] [117, 81, 89] [153, 44, 238] [192, 12, 184] [116, 53, 67] [137, 25, 136] [83, 179, 128] [6, 225, 201] [89, 151, 47] [103, 173, 16] [160, 247, 223] [83, 63, 83] [88, 117, 59] [124, 121, 180] [160, 239, 98] [92, 189, 95] [157, 245, 5] [53, 164, 247] [223, 174, 68] [129, 4, 226] [199, 51, 42] [40, 132, 192] [217, 209, 235] [90, 192, 239] [82, 210, 113] [184, 18, 139] [232, 133, 100] [14, 90, 39] [180, 28, 252] [254, 247, 77] [21, 183, 150] [18, 222, 6] [27, 22, 247]</span></span><br></pre></td></tr></table></div></figure><p>ËÄÉÂØüÈöèÊú∫Êï∞ÁßçÂ≠ê‰∏éÂºÇÊàñËøêÁÆóÔºåÂà©Áî® $seeds$ Âíå $ res$ ÁîüÊàêÂÆåÊï¥ÁöÑ $rands$ ÂêéÂÜçÂºÇÊàñËøêÁÆóÂç≥ÂèØÂæóÂà∞flag„ÄÇËß£ÂØÜÊó∂ËÆ∞ÂæóÊää $res$ È¶ñ‰ΩçÁöÑ $0$ Âä†‰∏ä</p><p>Ëß£ÂØÜ‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">seeds = [<span class="number">6756</span>, <span class="number">949</span>, <span class="number">8167</span>, <span class="number">2246</span>, <span class="number">9307</span>, <span class="number">4748</span>, <span class="number">9651</span>, <span class="number">1460</span>, <span class="number">3867</span>, <span class="number">5744</span>, <span class="number">5815</span>, <span class="number">713</span>, <span class="number">1057</span>, <span class="number">5614</span>, <span class="number">4024</span>, <span class="number">8075</span>, <span class="number">3862</span>, <span class="number">732</span>, <span class="number">279</span>, <span class="number">5308</span>, <span class="number">7815</span>, <span class="number">2251</span>, <span class="number">5533</span>, <span class="number">6324</span>, <span class="number">6786</span>, <span class="number">8549</span>, <span class="number">4421</span>, <span class="number">6651</span>, <span class="number">7409</span>, <span class="number">4880</span>, <span class="number">6246</span>, <span class="number">1249</span>, <span class="number">192</span>, <span class="number">4099</span>, <span class="number">1704</span>, <span class="number">3678</span>, <span class="number">7520</span>, <span class="number">1378</span>, <span class="number">2642</span>, <span class="number">9154</span>, <span class="number">5690</span>, <span class="number">8621</span>, <span class="number">1717</span>, <span class="number">4992</span>, <span class="number">8903</span>, <span class="number">1608</span>, <span class="number">3214</span>, <span class="number">2565</span>, <span class="number">3146</span>, <span class="number">2521</span>, <span class="number">2070</span>, <span class="number">1047</span>, <span class="number">5784</span>, <span class="number">8682</span>, <span class="number">1057</span>, <span class="number">1091</span>, <span class="number">8655</span>, <span class="number">2957</span>, <span class="number">8591</span>, <span class="number">1284</span>, <span class="number">9162</span>, <span class="number">2974</span>, <span class="number">9395</span>]</span><br><span class="line">res = [<span class="number">0</span>, <span class="number">8</span>, <span class="number">221</span>, <span class="number">50</span>, <span class="number">176</span>, <span class="number">21</span>, <span class="number">79</span>, <span class="number">19</span>, <span class="number">208</span>, <span class="number">117</span>, <span class="number">8</span>, <span class="number">51</span>, <span class="number">171</span>, <span class="number">156</span>, <span class="number">247</span>, <span class="number">101</span>, <span class="number">60</span>, <span class="number">46</span>, <span class="number">152</span>, <span class="number">162</span>, <span class="number">182</span>, <span class="number">29</span>, <span class="number">16</span>, <span class="number">102</span>, <span class="number">154</span>, <span class="number">22</span>, <span class="number">117</span>, <span class="number">65</span>, <span class="number">21</span>, <span class="number">121</span>, <span class="number">197</span>, <span class="number">170</span>, <span class="number">2</span>, <span class="number">217</span>, <span class="number">118</span>, <span class="number">201</span>, <span class="number">15</span>, <span class="number">132</span>, <span class="number">246</span>, <span class="number">21</span>, <span class="number">1</span>, <span class="number">250</span>, <span class="number">7</span>, <span class="number">45</span>, <span class="number">130</span>, <span class="number">124</span>, <span class="number">231</span>, <span class="number">200</span>, <span class="number">103</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">86</span>, <span class="number">159</span>, <span class="number">211</span>, <span class="number">168</span>, <span class="number">82</span>, <span class="number">11</span>, <span class="number">60</span>, <span class="number">173</span>, <span class="number">209</span>, <span class="number">168</span>, <span class="number">191</span>, <span class="number">255</span>, <span class="number">101</span>]</span><br><span class="line">length = <span class="number">63</span></span><br><span class="line">flag1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    seed = seeds[i]</span><br><span class="line">    random.seed(seed)</span><br><span class="line">    rands = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        rands.append(random.randint(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">    flag1.append(<span class="built_in">chr</span>(res[i+<span class="number">1</span>] ^ rands[i % <span class="number">4</span>] ^ res[i]))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>.join(i <span class="keyword">for</span> i <span class="keyword">in</span> flag1)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></div></figure><p>ÂæóÂà∞flagÔºö</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnss&#123;Trust me!This is turely random!!!!TURELY RANDOMMMMMM!!!!!&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="üòã-Âü∫Âú∞ÈÅ≠Âà∞ÊîªÂáª"   >          <a href="#üòã-Âü∫Âú∞ÈÅ≠Âà∞ÊîªÂáª" class="heading-link"><i class="fas fa-link"></i></a><a href="#üòã-Âü∫Âú∞ÈÅ≠Âà∞ÊîªÂáª" class="headerlink" title="[üòã] Âü∫Âú∞ÈÅ≠Âà∞ÊîªÂáª"></a>[üòã] Âü∫Âú∞ÈÅ≠Âà∞ÊîªÂáª</h3>      <p>ÂÖàË¥¥‰ª£Á†Å</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line">dic = <span class="string">&#x27;0987654321qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPLKJHGFDSAZXCVBNM!@#$%^&amp;*-=+:;()&#123;&#125;&lt;&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec_to_ter</span>(<span class="params">num</span>):</span><br><span class="line">    l = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num, reminder = <span class="built_in">divmod</span>(num, <span class="number">3</span>)</span><br><span class="line">        l.append(<span class="built_in">str</span>(reminder))</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(l[::-<span class="number">1</span>]).zfill(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ter_to_dec</span>(<span class="params">st</span>):</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(st)):</span><br><span class="line">        num += <span class="number">3</span>**(<span class="built_in">len</span>(st) - i - <span class="number">1</span>) * <span class="built_in">int</span>(st[i])</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cy = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg) // <span class="number">3</span>):</span><br><span class="line">    st = <span class="string">&#x27;0&#x27;</span> + dec_to_ter(<span class="built_in">ord</span>(msg[<span class="number">3</span> * i])) + dec_to_ter(<span class="built_in">ord</span>(</span><br><span class="line">        msg[<span class="number">3</span> * i + <span class="number">1</span>])) + dec_to_ter(<span class="built_in">ord</span>(msg[<span class="number">3</span> * i + <span class="number">2</span>]))</span><br><span class="line">    cy += dic[ter_to_dec(st[:<span class="number">4</span>])] + dic[ter_to_dec(st[<span class="number">4</span>:<span class="number">8</span>])] + dic[ter_to_dec(</span><br><span class="line">        st[<span class="number">8</span>:<span class="number">12</span>])] + dic[ter_to_dec(st[<span class="number">12</span>:<span class="number">16</span>])]</span><br><span class="line">res = <span class="string">&#x27;0&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join([dec_to_ter(<span class="built_in">ord</span>(msg[i])) <span class="keyword">for</span> i <span class="keyword">in</span> st[<span class="built_in">len</span>(msg) // <span class="number">3</span> * <span class="number">3</span>:]])</span><br><span class="line">res += <span class="string">&#x27;0&#x27;</span> * ((<span class="built_in">len</span>(res) // <span class="number">4</span> + <span class="number">1</span>) * <span class="number">4</span> - <span class="built_in">len</span>(res))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res) // <span class="number">4</span>):</span><br><span class="line">    cy += dic[<span class="number">4</span> * i:<span class="number">4</span> * i + <span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(cy)</span><br><span class="line"></span><br><span class="line"><span class="comment">#eJ:zwWufwZuYwHsvelcawj9le^jxwCMb7HjhwZuYwJMz7JVl7Hugq^3j7Zob1)qQeZuke7Hj7J:n4RZze^jU1x-ge%Ige%IuqHjmeCHzwRMte^nge(ZhqHqkqKWue%MO0987</span></span><br></pre></td></tr></table></div></figure><p>Âøò‰∫ÜÊÄé‰πàÂÅö‰∫ÜÔºåÂÖàÊääËß£È¢ò‰ª£Á†ÅÊîæ‰∏äÊù•ÔºåÂêéÈù¢ÂÜçÁúã</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dec_to_ter</span>(<span class="params">num</span>):  <span class="comment"># ÂçÅËøõÂà∂ËΩ¨‰∏âËøõÂà∂Ôºà‰øùÁïô4‰ΩçÔºâ</span></span><br><span class="line">    l = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num, reminder = <span class="built_in">divmod</span>(num, <span class="number">3</span>)</span><br><span class="line">        l.append(<span class="built_in">str</span>(reminder))</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(l[::-<span class="number">1</span>]).zfill(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ter_to_dec</span>(<span class="params">st</span>):  <span class="comment"># ‰∏âËøõÂà∂ËΩ¨ÂçÅËøõÂà∂ÔºàËæìÂÖ•Â≠óÁ¨¶‰∏≤Ôºâ</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(st)):</span><br><span class="line">        num += <span class="number">3</span>**(<span class="built_in">len</span>(st) - i - <span class="number">1</span>) * <span class="built_in">int</span>(st[i])</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;0987654321qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPLKJHGFDSAZXCVBNM!@#$%^&amp;*-=+:;()&#123;&#125;&lt;&gt;&#x27;</span></span><br><span class="line">cy = <span class="string">&#x27;eJ:zwWufwZuYwHsvelcawj9le^jxwCMb7HjhwZuYwJMz7JVl7Hugq^3j7Zob1)qQeZuke7Hj7J:n4RZze^jU1x-ge%Ige%IuqHjmeCHzwRMte^nge(ZhqHqkqKWue%MO0987&#x27;</span></span><br><span class="line">msgs = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cy)//<span class="number">4</span>):</span><br><span class="line">    s = cy[i*<span class="number">4</span>:i*<span class="number">4</span>+<span class="number">4</span>]</span><br><span class="line">    st = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> s:</span><br><span class="line">        st += <span class="built_in">str</span>(dec_to_ter(dic.index(n)))</span><br><span class="line">        </span><br><span class="line">    msgs += st[<span class="number">1</span>::]</span><br><span class="line"></span><br><span class="line">msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msgs)//<span class="number">5</span>):</span><br><span class="line">    pd = msgs[i*<span class="number">5</span>:i*<span class="number">5</span>+<span class="number">5</span>]</span><br><span class="line">    msg += <span class="built_in">chr</span>(ter_to_dec(pd))</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></div></figure><p>ËøêË°åÁªìÊûúÔºö</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qing ji zhu n@melessoier shi zhen de qiang!!!Your flag is:cnss&#123;This_is_a_strange_switch_of_Base&#125; ¬•</span><br></pre></td></tr></table></div></figure>        <h3 id="üòã-üòó-2-Smooth-Criminal"   >          <a href="#üòã-üòó-2-Smooth-Criminal" class="heading-link"><i class="fas fa-link"></i></a><a href="#üòã-üòó-2-Smooth-Criminal" class="headerlink" title="[(üòã+üòó)/2] Smooth Criminal"></a>[(üòã+üòó)/2] Smooth Criminal</h3>      <p>‰ª£Á†Å</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">g = <span class="number">23</span></span><br><span class="line">p = <span class="number">335215034881592512312398694238485179340610060759881511231472142277527176340784432381542726029524727833039074808456839870641607412102746854257629226877248337002993023452385472058106944014653401647033456174126976474875859099023703472904735779212010820524934972736276889281087909166017427905825553503050645575935980580803899122224368875197728677516907272452047278523846912786938173456942568602502013001099009776563388736434564541041529106817380347284002060811645842312648498340150736573246893588079033524476111268686138924892091575797329915240849862827621736832883215569687974368499436632617425922744658912248644475097139485785819369867604176912652851123185884810544172785948158330991257118563772736929105360124222843930130347670027236797458715653361366862282591170630650344062377644570729478796795124594909835004189813214758026703689710017334501371279295621820181402191463184275851324378938021156631501330660825566054528793444353</span></span><br><span class="line">x = bytes_to_long(msg)</span><br><span class="line">h = <span class="built_in">pow</span>(g,x,p)</span><br><span class="line"><span class="built_in">print</span>(h)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">284807206758690260674168635652206676153199531206012399963212250117387237611215360933500261515214683228087961018802214033227875404285999805861378064908267139553648162291537289278610803697593790816897557638428568100928359466319989545031886032567685512341977270979526717345142165708163150135333252686395591140161831940144432170025393466325742577593887920556316984992847396283579269633262200726954355227038902620716137491876506054110491178240133590849734496335712064335802238492192883394892712228203054091984354156897863240197296165162563130406991577815765695750522464228829570550025932368633890216042941018677666517405480771960616480812214562091924764071878808127451559388368257581409875583275118825609722046677620382418300990385176438231226653889407671404650316193783984038250699566770765090427892884433879512806495203724706133916982135893710559405918247360707377685182171666477087313942829242876879340985182675501598869126412636</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></div></figure><p>Á¶ªÊï£ÂØπÊï∞ÈóÆÈ¢òÔºåÈ¢òÁõÆÂ∑≤ÁªèÊöóÁ§∫ $p-1$ ÊòØ‰∏Ä‰∏™ÂÖâÊªëÊï∞ÔºåÊòæÁÑ∂ÊòØÊÉ≥ËÄÉÂØü $Pohilg_Hellman$ ÁÆóÊ≥ï„ÄÇ</p><p>Áõ¥Êé•ÊâîËøõ $sage$ Ê±ÇËß£ÂÅ∑‰∏ÄÊ≥¢Êáí„ÄÇ    sage yyds! (bushi</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h = <span class="number">284807206758690260674168635652206676153199531206012399963212250117387237611215360933500261515214683228087961018802214033227875404285999805861378064908267139553648162291537289278610803697593790816897557638428568100928359466319989545031886032567685512341977270979526717345142165708163150135333252686395591140161831940144432170025393466325742577593887920556316984992847396283579269633262200726954355227038902620716137491876506054110491178240133590849734496335712064335802238492192883394892712228203054091984354156897863240197296165162563130406991577815765695750522464228829570550025932368633890216042941018677666517405480771960616480812214562091924764071878808127451559388368257581409875583275118825609722046677620382418300990385176438231226653889407671404650316193783984038250699566770765090427892884433879512806495203724706133916982135893710559405918247360707377685182171666477087313942829242876879340985182675501598869126412636</span></span><br><span class="line">g = <span class="number">23</span></span><br><span class="line">p = <span class="number">335215034881592512312398694238485179340610060759881511231472142277527176340784432381542726029524727833039074808456839870641607412102746854257629226877248337002993023452385472058106944014653401647033456174126976474875859099023703472904735779212010820524934972736276889281087909166017427905825553503050645575935980580803899122224368875197728677516907272452047278523846912786938173456942568602502013001099009776563388736434564541041529106817380347284002060811645842312648498340150736573246893588079033524476111268686138924892091575797329915240849862827621736832883215569687974368499436632617425922744658912248644475097139485785819369867604176912652851123185884810544172785948158330991257118563772736929105360124222843930130347670027236797458715653361366862282591170630650344062377644570729478796795124594909835004189813214758026703689710017334501371279295621820181402191463184275851324378938021156631501330660825566054528793444353</span></span><br><span class="line">d = discrete_log(h,mod(g, p))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></div></figure><p>ÂæóÂà∞flagÔºö</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnss&#123;You_have_got_Pohilg_Hellman!&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="üòó-ECDLP"   >          <a href="#üòó-ECDLP" class="heading-link"><i class="fas fa-link"></i></a><a href="#üòó-ECDLP" class="headerlink" title="[üòó] ECDLP"></a>[üòó] ECDLP</h3>      <p>‰ª£Á†ÅÔºö</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import bytes_to_long</span><br><span class="line">M = 93556643250795678718734474880013829509320385402690660619699653921022012489089</span><br><span class="line">A = 66001598144012865876674115570268990806314506711104521036747533612798434904785</span><br><span class="line">B = 25255205054024371783896605039267101837972419055969636393425590261926131199030</span><br><span class="line">P = (56027910981442853390816693056740903416379421186644480759538594137486160388926, 65533262933617146434438829354623658858649726233622196512439589744498050226926)</span><br><span class="line">F = FiniteField(M)</span><br><span class="line">E = EllipticCurve(F,[A,B])</span><br><span class="line">P = E.point(P)</span><br><span class="line">key = b&#x27;fake_key&#x27;</span><br><span class="line">flag = b&#x27;cnss&#123;&#x27;+ key +b&#x27;&#125;&#x27;</span><br><span class="line">key = bytes_to_long(key)</span><br><span class="line">assert(len(bin(key))&lt;100)</span><br><span class="line">Q = key * P</span><br><span class="line">print(Q)</span><br></pre></td></tr></table></div></figure><p>‰∏ÄÈÅìÁÆÄÂçïÁöÑECDLPÈóÆÈ¢òÔºåËÄÉÂØü $Pohlig_Hellman$ ÁÆóÊ≥ï</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">M = 93556643250795678718734474880013829509320385402690660619699653921022012489089</span><br><span class="line">A = 66001598144012865876674115570268990806314506711104521036747533612798434904785</span><br><span class="line">B = 25255205054024371783896605039267101837972419055969636393425590261926131199030</span><br><span class="line">P = (56027910981442853390816693056740903416379421186644480759538594137486160388926, 65533262933617146434438829354623658858649726233622196512439589744498050226926)</span><br><span class="line">Q = (45327498586483906413153672412174634093375862785049326580296250293031012757729, 92851637248675027432500221064266708706584869653830467154078497414427393871661)</span><br><span class="line">F = FiniteField(M)</span><br><span class="line">E = EllipticCurve(F,[A,B])</span><br><span class="line">P = E.point(P)</span><br><span class="line">Q = E.point(Q)</span><br><span class="line">factors, exponents = zip(*factor(P.order()))</span><br><span class="line">primes = [factors[i] ^ exponents[i] for i in range(len(factors))][:-2]</span><br><span class="line">dlogs = []</span><br><span class="line">for fac in primes:</span><br><span class="line">    t = int(P.order()) // int(fac)</span><br><span class="line">    dlog = discrete_log(t*Q,t*P,operation=&quot;+&quot;)</span><br><span class="line">    dlogs += [dlog]</span><br><span class="line">    print(&quot;factor: &quot;+str(fac)+&quot;, Discrete Log: &quot;+str(dlog)) #calculates discrete logarithm for each prime order</span><br><span class="line"></span><br><span class="line">key = crt(dlogs,primes)</span><br><span class="line">print(key)</span><br></pre></td></tr></table></div></figure><p>Ê±ÇÂá∫keyÂêéÊâîËøõIDLEËΩ¨ÂõûbytesÁ±ªÂûãÂæóÂà∞flagÔºö</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnss&#123;S4G3&amp;P0h1i9&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="üòó-ÈÇ£‰∏™Áî∑‰∫∫ÔºÅÔºÅÔºÅ"   >          <a href="#üòó-ÈÇ£‰∏™Áî∑‰∫∫ÔºÅÔºÅÔºÅ" class="heading-link"><i class="fas fa-link"></i></a><a href="#üòó-ÈÇ£‰∏™Áî∑‰∫∫ÔºÅÔºÅÔºÅ" class="headerlink" title="[üòó] ÈÇ£‰∏™Áî∑‰∫∫ÔºÅÔºÅÔºÅ"></a>[üòó] ÈÇ£‰∏™Áî∑‰∫∫ÔºÅÔºÅÔºÅ</h3>      <p>‰∏áÊÅ∂ÁöÑÁ∫ØÁåúÈ¢ò/(„Ñío„Ñí)/~~</p><p>ÂÖàÁúã‰ª£Á†Å</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;cnss&#123;......&#125;&#x27;</span></span><br><span class="line">Bits = <span class="number">256</span></span><br><span class="line"></span><br><span class="line">banner = <span class="string">br&#x27;&#x27;&#x27;[+] Big hacker MMonster is cracking a communications system.</span></span><br><span class="line"><span class="string">[+] Can you help him decrypt the secret?</span></span><br><span class="line"><span class="string">[+] MMonster will give you a flag in return.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">menu = <span class="string">br&#x27;&#x27;&#x27;[+] 1.Get your gift</span></span><br><span class="line"><span class="string">[+] 2.Give me the secret</span></span><br><span class="line"><span class="string">[+] Give me your choice:&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof_of_work</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(urandom(<span class="number">8</span>))</span><br><span class="line">        proof = <span class="string">&#x27;&#x27;</span>.join([</span><br><span class="line">            random.choice(string.ascii_letters + string.digits)</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)</span><br><span class="line">        ])</span><br><span class="line">        digest = sha256(proof.encode()).hexdigest()</span><br><span class="line">        self.dosend(</span><br><span class="line">            <span class="built_in">str</span>.encode((<span class="string">&quot;[+] sha256(XXXX + %s) == %s&quot;</span> % (proof[<span class="number">4</span>:], digest))))</span><br><span class="line">        self.send(<span class="built_in">str</span>.encode(<span class="string">&#x27;[+] Give me XXXX:&#x27;</span>))</span><br><span class="line">        x = self.request.recv(<span class="number">10</span>)</span><br><span class="line">        x = (x.strip()).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(</span><br><span class="line">            (x + proof[<span class="number">4</span>:]).encode()).hexdigest() != digest:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dosend</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.request.sendall(msg + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_line</span>(<span class="params">self</span>):</span><br><span class="line">        body = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            ch = self.request.recv(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="string">b&quot;\n&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            body = body + ch</span><br><span class="line">        <span class="keyword">return</span> body</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            signal.alarm(<span class="number">120</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.proof_of_work():</span><br><span class="line">                self.dosend(<span class="string">b&#x27;[!] You must pass the PoW!&#x27;</span>)</span><br><span class="line">                self.request.close()</span><br><span class="line">            t = <span class="built_in">len</span>(flag) * random.randint(<span class="number">4</span>, <span class="number">8</span>)</span><br><span class="line">            Con = [getPrime(Bits // <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t)]</span><br><span class="line">            secret = getPrime(Bits)</span><br><span class="line">            p = getPrime(Bits)</span><br><span class="line">            self.send(banner)</span><br><span class="line">            self.dosend(<span class="string">f&quot;[+] p = <span class="subst">&#123;p&#125;</span>&quot;</span>.encode())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                self.send(menu)</span><br><span class="line">                choice = self.read_line()</span><br><span class="line">                <span class="keyword">if</span> (choice == <span class="string">b&quot;1&quot;</span>):</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        num = random.randint(<span class="number">1</span>, p)</span><br><span class="line">                        result = secret</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">                            result += Con[i] * <span class="built_in">pow</span>(num, i + <span class="number">1</span>, p) % p</span><br><span class="line">                        result = result % p</span><br><span class="line">                        self.dosend(<span class="string">b&quot;[+] Here is your gift:&quot;</span>)</span><br><span class="line">                        self.dosend(<span class="string">f&quot;[+] (<span class="subst">&#123;num&#125;</span>, <span class="subst">&#123;result&#125;</span>)&quot;</span>.encode())</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        self.dosend(<span class="string">b&#x27;[!] ERROR&#x27;</span>)</span><br><span class="line">                <span class="keyword">elif</span> (choice == <span class="string">b&#x27;2&#x27;</span>):</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        self.send(<span class="string">b&#x27;[+] The secret: &#x27;</span>)</span><br><span class="line">                        ans = self.read_line()</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">int</span>(ans) == secret):</span><br><span class="line">                            self.dosend(</span><br><span class="line">                                <span class="string">b&#x27;[+] Congratulations! You successfully cracked the system&#x27;</span></span><br><span class="line">                            )</span><br><span class="line">                            self.dosend(</span><br><span class="line">                                <span class="string">f&#x27;[+] Here is your flag: <span class="subst">&#123;flag&#125;</span>&#x27;</span>.encode())</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            self.dosend(<span class="string">b&#x27;[+] You are wrong&#x27;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        self.dosend(<span class="string">b&#x27;[!] ERROR&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.dosend(<span class="string">b&#x27;[!] Please follow the rule!&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> TimeoutError:</span><br><span class="line">            self.dosend(<span class="string">b&#x27;[!] Timeout!&#x27;</span>)</span><br><span class="line">            self.request.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.dosend(<span class="string">b&#x27;[!] Whats wrong???&#x27;</span>)</span><br><span class="line">            self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">9999</span></span><br><span class="line">    server = ThreadedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 101.32.29.195 9999</span><br></pre></td></tr></table></div></figure><p>È¶ñÂÖàÊòØÂ∏∏ËßÑÁöÑ $proof_of_work$ ÔºåÊö¥ÂäõÁ†¥Ëß£Âç≥ÂèØ</p><p>ËøõÂÖ•Á≥ªÁªüÂêéÊúâ‰∏§ÁßçÊìç‰ΩúÂèØÈÄâ</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[+] <span class="number">1.</span>Get your gift</span><br><span class="line">[+] <span class="number">2.</span>Give me the secret</span><br><span class="line">[+] Give me your choice:</span><br></pre></td></tr></table></div></figure><p>Êìç‰Ωú $2$ ÂêéÂèëÈÄÅÊ≠£Á°ÆÁöÑ $secret$ Â∞±ÂèØ‰ª•ÂæóÂà∞ $flag$</p><p>Êìç‰Ωú $1$ ÂêéÁ≥ªÁªü‰ºöÁîüÊàê‰∏Ä‰∏™ÈöèÊú∫ÁöÑ $num$ ‰ª£ÂÖ•‰∏Ä‰∏™ $t$ Ê¨°Âêå‰ΩôÂ§öÈ°πÂºèËøõË°åËøêÁÆóÂæóÂà∞ $result$ÔºåÁÑ∂ÂêéÁªôÂá∫ $num$ Âíå $result$ÔºåÂÖ∂‰∏≠Â§öÈ°πÂºèÁöÑÂ∏∏Êï∞È°πÂ∞±ÊòØÊàë‰ª¨Ë¶ÅÊ±ÇÁöÑ $secret$</p><p>ÂÖ∂‰∏≠ÈÄâÊã© $1$ ÂèØ‰ª•ÈáçÂ§çÈÄâÊã©ÔºåÁî±Ê≠§ÂèØ‰ª•ÈÄöËøá‰∏çÊñ≠Âú∞ÈÄâÊã©Êìç‰Ωú $1$ Êù•ÂæóÂà∞ $t$ ÁªÑ$num$ Âíå $result$ÔºåÁÑ∂ÂêéÊûÑÂª∫Âá∫‰∏Ä‰∏™ $t$ Áª¥ÁöÑÁ∫øÊÄßÊñπÁ®ãÁªÑÊù•Ê±ÇËß£ÂæóÂà∞ $secret$</p><p>ÊúÄÂêéÈúÄË¶ÅËß£ÂÜ≥ÁöÑÈóÆÈ¢òÂ∞±ÊòØËøô‰∏™ $t$Ôºå$len(flag)$ Êú™Áü•‰∏îÊØèÊ¨°ËøêË°åËøò‰ºöÁîüÊàêÈöèÊú∫Êï∞„ÄÇ„ÄÇ„ÄÇ</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = len(flag) * random.randint(4, 8)</span><br></pre></td></tr></table></div></figure><p>ÂàöÂºÄÂßãËÑëÂ≠êÊäΩ‰∫ÜÂú®ÊâãÂä®ÁåúÔºåÂ§±Ë¥•Êó†Êï∞Ê¨°ÂêéÂøÉÊÄÅÂèëÁîü‰∫Ü‰∫øÁÇπÁÇπÂèòÂåñÔºà</p><p>ÂêéÈù¢Âà©Áî®pythonÈáåÁöÑosÂåÖÊù•ËøõË°åËá™Âä®ËøêË°åÔºåÂ∞ùËØïÂà∞ $len(flag)=45$ Êó∂ÂæóÂà∞flag</p><p>ÂØπ‰∫éÊ±ÇËß£ $flag$ÔºåÊúÄÂàùÊâãÂÜô‰∫Ü‰∏Ä‰∏™Ê®°Êù°‰ª∂‰∏ãÁöÑÁÆÄÊòìÈ´òÊñØÊ∂àÂÖÉÊù•Ê±ÇËß£ÔºåÂæóÂà∞flagÂêéÂèëÁé∞Â•ΩÂÉèÊÉ≥Ë¶ÅËÄÉÂØüÁöÑÊòØÊãâÊ†ºÊúóÊó•ÊèíÂÄºÊ≥ï</p><p>ÂÆåÊï¥Ëß£È¢ò‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ext_gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x, y, d = ext_gcd(b, a % b)</span><br><span class="line">        x, y = y, (x - (a // b) * y)</span><br><span class="line">        <span class="keyword">return</span> x, y, d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_matrix</span>(<span class="params">nums, results, t, q</span>):</span><br><span class="line">    matrix = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t + <span class="number">1</span>):</span><br><span class="line">        rows = []</span><br><span class="line">        num = nums[i]</span><br><span class="line">        result = results[i]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">            rows.append(<span class="built_in">pow</span>(num, k + <span class="number">1</span>, q))</span><br><span class="line">        rows.append(<span class="number">1</span>)</span><br><span class="line">        rows.append(result)</span><br><span class="line">        matrix.append(rows)</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_secret</span>(<span class="params">matrix, t, q</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">        <span class="keyword">if</span> matrix[i][i] != <span class="number">1</span>:</span><br><span class="line">            s1 = ext_gcd(matrix[i][i], q)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, t + <span class="number">2</span>):</span><br><span class="line">                matrix[i][j] = (matrix[i][j] * s1) % q</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, t + <span class="number">1</span>):</span><br><span class="line">            s2 = matrix[k][i]</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(i, t + <span class="number">2</span>):</span><br><span class="line">                matrix[k][l] = (matrix[k][l] - matrix[i][l] * s2) % q</span><br><span class="line">    d = ext_gcd(matrix[t][t], q)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> (matrix[t][t + <span class="number">1</span>] * d) % q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;101.32.29.195&quot;</span>, <span class="number">9999</span>)</span><br><span class="line">TOTAL = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myhash</span>(<span class="params">text</span>):</span><br><span class="line">    mysha = hashlib.sha256()</span><br><span class="line">    mysha.update(text)</span><br><span class="line">    <span class="keyword">return</span> mysha.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">passPoW</span>(<span class="params">plain, cipher</span>):</span><br><span class="line">    dic = string.digits+string.ascii_letters</span><br><span class="line">    <span class="keyword">for</span> a0 <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> a1 <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> a2 <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> a3 <span class="keyword">in</span> dic:</span><br><span class="line">                    tmp = (a0+a1+a2+a3+plain).encode()</span><br><span class="line">                    <span class="keyword">if</span> myhash(tmp) == cipher:</span><br><span class="line">                        <span class="keyword">return</span> a0+a1+a2+a3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># pass the PoW</span></span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    plain = recv[<span class="number">18</span>:<span class="number">34</span>]</span><br><span class="line">    cipher = recv[<span class="number">39</span>:-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(plain, cipher)</span><br><span class="line">    res = passPoW(plain, cipher)</span><br><span class="line">    <span class="built_in">print</span>(p.recvuntil(<span class="string">&quot;Give me XXXX:&quot;</span>.encode()))</span><br><span class="line">    p.sendline(res.encode())</span><br><span class="line">    <span class="built_in">print</span>(res + plain)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        recv = p.recvline().decode()</span><br><span class="line">        <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    q = <span class="built_in">int</span>(recv[<span class="number">8</span>:-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;q = &#x27;</span> + <span class="built_in">str</span>(q))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        recv = p.recvline().decode()</span><br><span class="line">        <span class="comment"># print(recv.strip())</span></span><br><span class="line"></span><br><span class="line">    t = <span class="number">45</span> * <span class="number">5</span></span><br><span class="line">    nums = []</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t+<span class="number">1</span>):</span><br><span class="line">        p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            recv = p.recvline().decode()</span><br><span class="line">            <span class="comment"># print(recv.strip())</span></span><br><span class="line">        gift = recv[<span class="number">5</span>:-<span class="number">2</span>].split(<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">        nums.append(<span class="built_in">int</span>(gift[<span class="number">0</span>]))</span><br><span class="line">        results.append(<span class="built_in">int</span>(gift[<span class="number">1</span>]))</span><br><span class="line">        <span class="comment"># print(&#x27;num = &#x27; + gift[0], &#x27;\nresult = &#x27; + gift[1])</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            recv = p.recvline().decode()</span><br><span class="line">            <span class="comment"># print(recv.strip())</span></span><br><span class="line"></span><br><span class="line">    matrix = set_matrix(nums, results, t, q)</span><br><span class="line">    secret = find_secret(matrix, t, q)</span><br><span class="line">    <span class="built_in">print</span>(secret)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(secret).encode())</span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    run = <span class="string">&#x27;python p7_writeup.py&#x27;</span></span><br><span class="line">    a = os.system(run)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">if</span> a != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></div></figure><p>flagÔºö</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnss&#123;Lagrange_i5_one_of_My_favour1te&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="üòó-RSA-I"   >          <a href="#üòó-RSA-I" class="heading-link"><i class="fas fa-link"></i></a><a href="#üòó-RSA-I" class="headerlink" title="[üòó] RSA I"></a>[üòó] RSA I</h3>      <p>‰∫ãRSAÔºÅ</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(bytes_to_long(flag) , e , n))</span><br><span class="line"></span><br><span class="line">_p = <span class="built_in">int</span>(<span class="built_in">bin</span>(p)[<span class="number">2</span>:<span class="number">258</span>]+<span class="built_in">bin</span>(p)[<span class="number">258</span>:][::-<span class="number">1</span>],<span class="number">2</span>) </span><br><span class="line">_q = <span class="built_in">int</span>(<span class="built_in">bin</span>(q)[<span class="number">258</span>:][::-<span class="number">1</span>]+<span class="built_in">bin</span>(q)[<span class="number">2</span>:<span class="number">258</span>],<span class="number">2</span>) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(_p ^ _q)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">128966867931621017951402141152350515585922701101703171805286229280649080647456092995914584397246443887423499663793458719282451496996613304284219288980124348105720917541598445131650977064828807037484823828553004028415721038165820372738002173903655842610359239877763360519229606532878770232406532771135170997013</span></span><br><span class="line"><span class="string">5690662746178266479325698709275119693770487802124577299826695176054941202523665055025450322208031101907866334556059314241344084994180738805538046733994924313334723193790887926979826447385190012967272407294079552678501721130119836521906772578870744755554658825724748264427246566006927477363674507384245147796</span></span><br><span class="line"><span class="string">5334584593664858319670147545831540027620360712512679965236952968664258458326815898964419736009663358894095508398927605649898980377954463431300198964796146</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></div></figure><p>ÈöæÁÇπÂú®‰∫éÈÄöËøá $p*q$ Âíå $_p\bigoplus_q$ Êù•ÂàÜËß£ $p,q$</p><p>ËßÇÂØüÂèëÁé∞ÔºåÊää $_p\bigoplus_q$ ÁöÑÂêé256‰ΩçÂèçÂêëÂêéÂèØ‰ª•ÂæóÂà∞ $p\bigoplus q_f$Ôºå‰∏™‰∫∫ÊÑüËßâÂ∫îËØ•ÊòØË¶ÅÂà©Áî®ÂºÇÊàñÈôêÂà∂Êù•Êö¥ÂäõÂàÜËß£ $p,q$Ôºå‰ΩÜÊòØÊÄùËÄÉÂêéÊ≤°ËÉΩÂÆûÁé∞ÁÆóÊ≥ï</p><p>ÂàöÂºÄÂßãÂú®CTFtime‰∏äÊâæÂà∞‰∏ÄÈÅìÁ±ª‰ººÁöÑrsaÈ¢òÁõÆ<span class="exturl"><a class="exturl__link"   href="https://ctftime.org/task/15578" >PlaidCTF 2021 / xorsa</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>Ôºå‰ΩÜÊòØËøôÈÅìÈ¢ò‰∏≠ÁöÑÈôêÂà∂Êù°‰ª∂ÊòØ $p\bigoplus q$ ÔºåÂ∞ùËØïÁ±ªÊØîÔºåÊó†Êûú</p><p>ÂêéÈù¢ÂçïÁã¨ÂØªÊâæÂºÇÊàñÂàÜËß£Áªà‰∫éÊâæÂà∞<span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/384418167" >GKCTF 2021 / XOR</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>ÔºåÂà©Áî®ËÑöÊú¨ÂàÜËß£ $p,q$ ÂêéÂ∏∏ËßÑÊ±ÇËß£rsaÂæóÂà∞flag</p><p>‰∏çËøáÊúÄÂêéËøòÊòØÊ≤°ÊúâÊêûÊáÇÂéüÁêÜÔºåÊãõÊñ∞ÁªìÊùüÂêéÊâæ‰∏™Â∏àÂÇÖÈóÆ‰∏ÄÂìà</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solver</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, n</span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.n = n</span><br><span class="line">        self.pq = [(<span class="number">0</span>, <span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, b, p, q</span>):</span><br><span class="line">        <span class="keyword">if</span> p * q &lt;= n <span class="keyword">and</span> (p | (b - <span class="number">1</span>)) * (q | (b - <span class="number">1</span>)) &gt;= n:</span><br><span class="line">            self.pq.append((p, q))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> shift <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">4095</span>, -<span class="number">1</span>, -<span class="number">1</span>)):</span><br><span class="line">            b = <span class="number">1</span> &lt;&lt; shift</span><br><span class="line">            pq, self.pq = self.pq, []</span><br><span class="line">            <span class="keyword">for</span> p, q <span class="keyword">in</span> pq:</span><br><span class="line">                <span class="keyword">if</span> self.x &amp; b:</span><br><span class="line">                    self.add(b, p | b, q)</span><br><span class="line">                    self.add(b, p, q | b)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.add(b, p, q)</span><br><span class="line">                    self.add(b, p | b, q | b)</span><br><span class="line">        <span class="keyword">return</span> self.pq[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    x = <span class="number">5334584593664858319670147545831540027620360712512679965236952968664258458326815898964419736009663358894095508398927605649898980377954463431300198964796146</span></span><br><span class="line">    n = <span class="number">128966867931621017951402141152350515585922701101703171805286229280649080647456092995914584397246443887423499663793458719282451496996613304284219288980124348105720917541598445131650977064828807037484823828553004028415721038165820372738002173903655842610359239877763360519229606532878770232406532771135170997013</span></span><br><span class="line">    solver = Solver(x, n)</span><br><span class="line">    p, q = solver.solve()</span><br><span class="line">    <span class="built_in">print</span>(p, q)</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ext_gcd</span>(<span class="params">a, b</span>):  <span class="comment"># Êâ©Â±ïÊ¨ßÂá†ÈáåÂæóÁÆóÊ≥ï</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x, y, gcd = ext_gcd(b, a % b)  <span class="comment"># ÈÄíÂΩíÁõ¥Ëá≥‰ΩôÊï∞Á≠â‰∫é0(ÈúÄÂ§öÈÄíÂΩí‰∏ÄÂ±ÇÁî®Êù•Âà§Êñ≠)</span></span><br><span class="line">        x, y = y, (x - (a // b) * y)  <span class="comment"># ËæóËΩ¨Áõ∏Èô§Ê≥ïÂèçÂêëÊé®ÂØºÊØèÂ±Ça„ÄÅbÁöÑÂõ†Â≠ê‰ΩøÂæógcd(a,b)=ax+byÊàêÁ´ã</span></span><br><span class="line">        <span class="keyword">return</span> x, y, gcd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">12948472548502855475796108830280319241339751876644203406728117021144556144383328664200964459933613907132679575664273588175268439115295754485162100467976557</span></span><br><span class="line">q = <span class="number">9960006282480985513480885672444211883767328748705584719471703464167670477391828270868899276906078628248865861165369352288036643194313864072301868155144009</span></span><br><span class="line">m = <span class="number">5690662746178266479325698709275119693770487802124577299826695176054941202523665055025450322208031101907866334556059314241344084994180738805538046733994924313334723193790887926979826447385190012967272407294079552678501721130119836521906772578870744755554658825724748264427246566006927477363674507384245147796</span></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = ext_gcd(e, phi)[<span class="number">0</span>]</span><br><span class="line">flag = long_to_bytes(<span class="built_in">pow</span>(m, d, n))</span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br></pre></td></tr></table></div></figure><p>ÂæóÂà∞flagÔºö</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnss&#123;st0_Mmons7er_Or2_ajfwiclskjd&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="üòØ-RSA-II"   >          <a href="#üòØ-RSA-II" class="heading-link"><i class="fas fa-link"></i></a><a href="#üòØ-RSA-II" class="headerlink" title="[üòØ] RSA II"></a>[üòØ] RSA II</h3>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = 97814568264814384858194701955408461509880555772006698372422205341758322175891474378211599333051180365254844248340812534463000531890490435018379585036704801177155418066770861143206836558793774360498040810255823235715535487716966004194143204900564413879660115112965484824906920141847149888933004740523449213441</span><br><span class="line">e = 93943500165298065499950418373429723509334252629406924973909070866091749987346174290549648466771963135864917881154270768788129489671486923171733460927672763251885052132144244633336183737015936611716827476566876619327956203686756399730968768494676888428137426449681845021696056187478027217734766494935085365973</span><br><span class="line">c = 94824506238324647310189440118275905630079991117300404682731742667903989141279243563467739363969077465823348334409761663544741888528986945132364537746094780678318967503662858734042718154696328032759064617107207652499854549294495304943140505861316519905693752269944653247754307028004160249127852813312325931155</span><br></pre></td></tr></table></div></figure><p>È¢òÁõÆÂè™Áªô‰∫Ü $n,e,c$ ‰∏â‰∏™Êï∞ÊçÆÔºåÂàöÂºÄÂßãÁúã $e$ ÁöÑÂ§ßÂ∞èËßâÂæóÊòØ $Wiener‚Äôs Attack$ ÊàñËÄÖ $Boneh and Durfee attack$ÔºåÂ∞ùËØïÂ§±Ë¥•ÂêéÈô∑ÂÖ•‰∫ÜËø∑Ëå´ÔºåÁÑ∂ÂêéÁõ¥Êé•ÊâîfactordbÂèëÁé∞ÂàÜËß£Âá∫Êù•‰∫Ü„ÄÇ„ÄÇ„ÄÇË∂ÖÔºåÂ§ßÊÑè‰∫Ü</p><p>Â∏∏ËßÑËß£ÂØÜÂêéÂæóÂà∞‰∏Ä‰∏™ÁΩëÂùÄ</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://files.catbox.moe/eami99.py</span><br></pre></td></tr></table></div></figure><p>ÊâìÂºÄÂêéÂèëÁé∞Â•ó‰∫Ü‰∏ÄÂ±ÇÂïäËøôÊòØ</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,padding</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">7</span> </span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m+padding,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">25273007066020189408109545229904933542261476876009872439710113415858837573395525630415777935344105797142851844145072854811848998350900372253971849285971326186079657861753281055419024685971559366012439288855412385839773710368571132729119276524681516954047015289030441158082956015073955156160324687579087140475</span></span><br><span class="line"><span class="string">59742662912819263048476842525911792774606722595876218353030983190479211608519746735628199156539097538888609903705813533259650335449835222582640654777700444326609516992455668845647841850293730999545553827474883338490920161461753350303815384773788647536170704446255770720919964851226435888665577313224159779663</span></span><br><span class="line"><span class="string">67530919003139966773553200011128742490294797009276982165948531486788511785120120505106383097675618844859048245902703407886773958024692000896590916622934616822563863757961613349221514066937957870378716994349709221655837122691033725689519576287720351954630419028668871186060611604084354574970069046834491765983</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></div></figure><p>ÁúãÂÆå‰ª£Á†ÅÂêéÂèëÁé∞ÊòØ‰∏ÄÈÅì $Short_padding_attack$ ÁªìÂêà $Related_message_attack$ ÁöÑÈ¢òÁõÆÔºåËÄÉÂØüÂØπ $Coppersmith$ ÁÆóÊ≥ïÁöÑ‰ΩøÁî®</p><p>È¶ñÂÖàÂà©Áî® $Short_padding_attack$ Ê±ÇÂá∫ $padding$ ÔºåÁÑ∂Âêé‰ª£ÂÖ• $padding$ Âà©Áî® $Related_message_attack$ Ê±ÇËß£Âπ∂ËΩ¨ÂõûbytesÂç≥ÂèØÂæóÂà∞flag</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">def short_pad_attack(c1, c2, e, n):</span><br><span class="line">    PRxy.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRx.&lt;xn&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRZZ.&lt;xz,yz&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">    g1 = x^e - c1</span><br><span class="line">    g2 = (x+y)^e - c2</span><br><span class="line"></span><br><span class="line">    q1 = g1.change_ring(PRZZ)</span><br><span class="line">    q2 = g2.change_ring(PRZZ)</span><br><span class="line"></span><br><span class="line">    h = q2.resultant(q1)</span><br><span class="line">    h = h.univariate_polynomial()</span><br><span class="line">    h = h.change_ring(PRx).subs(y=xn)</span><br><span class="line">    h = h.monic()</span><br><span class="line"></span><br><span class="line">    kbits = n.nbits()//(2*e*e)</span><br><span class="line">    diff = h.small_roots(X=2^kbits, beta=0.5)[0]  # find root &lt; 2^kbits with factor &gt;= n^0.5</span><br><span class="line"></span><br><span class="line">    return diff</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def related_message_attack(c1, c2, diff, e, n):</span><br><span class="line">    PRx.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x^e - c1</span><br><span class="line">    g2 = (x+diff)^e - c2</span><br><span class="line"></span><br><span class="line">    def gcd(g1, g2):</span><br><span class="line">        while g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        return g1.monic()</span><br><span class="line"></span><br><span class="line">    return -gcd(g1, g2)[0]</span><br><span class="line"></span><br><span class="line">c1 = 25273007066020189408109545229904933542261476876009872439710113415858837573395525630415777935344105797142851844145072854811848998350900372253971849285971326186079657861753281055419024685971559366012439288855412385839773710368571132729119276524681516954047015289030441158082956015073955156160324687579087140475</span><br><span class="line">c2 = 59742662912819263048476842525911792774606722595876218353030983190479211608519746735628199156539097538888609903705813533259650335449835222582640654777700444326609516992455668845647841850293730999545553827474883338490920161461753350303815384773788647536170704446255770720919964851226435888665577313224159779663</span><br><span class="line">n = 67530919003139966773553200011128742490294797009276982165948531486788511785120120505106383097675618844859048245902703407886773958024692000896590916622934616822563863757961613349221514066937957870378716994349709221655837122691033725689519576287720351954630419028668871186060611604084354574970069046834491765983</span><br><span class="line">e = 7</span><br><span class="line">diff = short_pad_attack(c1, c2, e, n)</span><br><span class="line">flag = related_message_attack(c1, c2, diff, e, n)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag = bytes_to_long(<span class="number">59780862049663373465799351334364799719350413972042289550369773853093462961495194111494470756664785207187307066237</span>).decode</span><br></pre></td></tr></table></div></figure><p>flag:</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnss&#123;0x10001_getPrime_invert_pow_long_to_bytes&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="üòó-Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å‚Ö¢-amp-üòØ-Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å‚Ö£"   >          <a href="#üòó-Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å‚Ö¢-amp-üòØ-Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å‚Ö£" class="heading-link"><i class="fas fa-link"></i></a><a href="#üòó-Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å‚Ö¢-amp-üòØ-Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å‚Ö£" class="headerlink" title="[üòó] Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å‚Ö¢ &amp; [üòØ] Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å‚Ö£"></a>[üòó] Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å‚Ö¢ &amp; [üòØ] Â§ßÂ§ßË∂Ö‰∫∫ÁöÑ‰ª£Á†Å‚Ö£</h3>      <p>Âêå‰∏ÄÈÅìÈ¢òÁöÑ‰∏§‰∏™‰∏çÂêåÈöæÂ∫¶ÔºåËÄÉÂØüÁöÑÊ†∏ÂøÉÊòØ‰∏ãÈù¢Ëøô‰∏™ÂáΩÊï∞ÁöÑËÆ°ÁÆóÔºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># p is a prime number, 2 &lt;= a,b &lt; p</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b</span>):</span><br><span class="line">    S = <span class="built_in">set</span>()</span><br><span class="line">    prod = b</span><br><span class="line">    <span class="keyword">while</span>(prod <span class="keyword">not</span> <span class="keyword">in</span> S):</span><br><span class="line">        S.add(prod)</span><br><span class="line">        prod = prod * b % p</span><br><span class="line"></span><br><span class="line">    ret = <span class="number">1</span></span><br><span class="line">    prod = a </span><br><span class="line">    <span class="keyword">while</span>(prod <span class="keyword">not</span> <span class="keyword">in</span> S):</span><br><span class="line">        ret = ret + <span class="number">1</span></span><br><span class="line">        prod = prod * a % p</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></div></figure><p>È¢òÁõÆÁøªËØëËøáÊù•Â∞±ÊòØÊâæÂà∞ÊúÄÂ∞èÁöÑ $i$ Êª°Ë∂≥Ôºö</p><script type="math/tex; mode=display">\exist k \ \ makes \ \ a^i = b^k \pmod{m}</script><p>‰∏ÄÈÅìÁ∫ØÊï∞Â≠¶È¢òÔºåÁî®Âà∞ÁöÑÊòØÊï∞ËÆ∫‰∏≠Èò∂Áõ∏ÂÖ≥ÁöÑÁü•ËØÜÔºåÂàöÂºÄÂßãÂÅöÁöÑÊó†ÊØîËâ∞ÈöæÔºåÂêéÈù¢ÈÄöËøá‰∏æ‰æãÂ∞ùËØïÂæó(cai)Âà∞‰∫ÜÁªìÊûúÔºå‰ΩÜÊòØËøòÊ≤°ËÉΩÂæóÂà∞‰∏•Ë∞®ËØÅÊòé</p><script type="math/tex; mode=display">ret = \frac{ord_p(a)\times ord_p(b)}{gcd(ord_p(a),ord_p(b))}</script><p>ÂæóÂà∞ÂÖ¨ÂºèÂêéÂè™ÈúÄË¶ÅËß£ÂÜ≥Ê±ÇÈò∂ÁöÑÈóÆÈ¢òÂ∞±ÂèØ‰ª•‰∫ÜÔºåÂàöÂºÄÂßãÁî®ÁöÑÊòØÊö¥ÂäõÈÅçÂéÜ $\phi(p)$ Âõ†Êï∞ÁöÑÊñπÂºèÊù•Ê±ÇÈò∂Ôºå‰ΩÜÊòØÈÄüÂ∫¶Â§™ÊÖ¢‰∫ÜÔºåÁ¨¨‰∏ÄÈ¢òË∂≥Ë∂≥Ë∑ë‰∫Ü‰∏§‰∏™Â∞èÊó∂</p><p>‰ΩÜÊòØÁ¨¨‰∫åÈ¢òÊúâÊó∂Èó¥ÈôêÂà∂ÔºåÂ∞±‰∏çËÉΩÂÜçÁî®Ëøô‰πàÊö¥ÂäõÁöÑÊñπÊ≥ï‰∫ÜÔºåÂêéÈù¢‰ªéÂà§Êñ≠ÂéüÊ†πÁöÑÁÆóÊ≥ï‰∏≠ÂæóÂà∞ÂêØÂèëÔºåÈÄöËøáÁ≠õÈÄâÂéªÈô§Ë¥®Âõ†Êï∞ÁöÑÊñπÊ≥ïÊù•Ê±ÇÈò∂Ôºö</p><p>ÈÅçÂéÜ $\phi(p)$ ÁöÑË¥®Âõ†Êï∞ $p_i$ ÔºåËã• $a^\frac{\phi(p)}{p_i}\not=1$ ÔºåÂàô $p_i$ ‰∏çÊòØ $ord_p(a)$ ÁöÑË¥®Âõ†Êï∞ÔºåÂ∞Ü $\phi(p)$ ÂÖ∂‰ªé‰∏≠Èô§ÂéªÔºåÊúÄÂêéÂâ©‰∏ãÁöÑÂ∞±ÊòØ $ord_p(a)$ . ÂÖ∑‰Ωì‰ª£Á†ÅÂÆûÁé∞Â¶Ç‰∏ãÔºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">a, lst, p</span>):</span><br><span class="line">    <span class="comment"># start = time.perf_counter()</span></span><br><span class="line">    order = p - <span class="number">1</span></span><br><span class="line">    order_list = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> lst:</span><br><span class="line">        order_list.append(k)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(order_list)):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> order_list:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> order_list:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">pow</span>(a, order // i, p) == <span class="number">1</span>:</span><br><span class="line">                order = order // i</span><br><span class="line">                <span class="keyword">del</span> order_list[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                order_list.remove(i)</span><br><span class="line">    <span class="comment"># end = time.process_time()</span></span><br><span class="line">    <span class="comment"># print(f&#x27;Running time: &#123;end - start&#125; Seconds&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> order</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b, order_list, p</span>):</span><br><span class="line">    a1 = find(a, order_list, p)</span><br><span class="line">    b1 = find(b, order_list, p)</span><br><span class="line">    ret = a1 // gcd(a1, b1)</span><br><span class="line">    <span class="built_in">print</span>(ret)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></div></figure><p>ÁªèÊµãËØïÔºå‰ª£Á†ÅÂπ≥ÂùáÁî®Êó∂Âú®0.01-0.02sÂ∑¶Âè≥ÔºåÊàêÊûúËß£ÂÜ≥Á¨¨‰∫åÈ¢ò</p><p>‰∏çËøáÂ•ΩÂÉèËøòÂ≠òÂú®‰∏ÄÁÇπÂ∞èbugüò¢ÔºåÂõ†‰∏∫ÊàëËß£ÂÜ≥ÊéâÁ¨¨‰∫åÈ¢ò‰πãÂêéÁî®Ëøô‰∏™ÁÆóÊ≥ïÂéªËß£ÂÜ≥Á¨¨‰∏ÄÈ¢òÊó∂ÊúÄÂêéÁªìÊûú‰∏çÂ§™ÂØπÂä≤ÔºåËÄå‰∏îË∑ëÂá∫Êù•ÁöÑÁªìÊûúÊúâÊó∂ÂÄôËøò‰∏ç‰∏ÄÊ†∑Ôºå‰ΩÜÊòØÁî±‰∫éÊó∂Èó¥ÈóÆÈ¢òËøòÊ≤°‰ªîÁªÜÊâæÈóÆÈ¢òÂá∫Âú®Âì™ÔºåÂêéÈù¢ÊúâÊó∂Èó¥‰∫ÜÂÜçÁúã‰∏ÄÁúãÔºåÊâæÂ∏àÂÇÖË¶ÅËØÅÊòéÁöÑÊó∂ÂÄôÂèØ‰ª•ÈóÆ‰∏ÄÈóÆ</p><p>ÊúÄÂêéÁªôÂá∫‰∏§ÈÅìÈ¢òÁöÑflag</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnss&#123;490340709191995056161967738&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnss&#123;ACM_L1mit5_My_Im@ginati0n&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="üëø-CNSS-Crypto-Service"   >          <a href="#üëø-CNSS-Crypto-Service" class="heading-link"><i class="fas fa-link"></i></a><a href="#üëø-CNSS-Crypto-Service" class="headerlink" title="[üëø]CNSS Crypto Service"></a>[üëø]CNSS Crypto Service</h3>      <p>BOSSÈ¢òÊù•Ëæ£ÔºÅ</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> ocb <span class="keyword">import</span> OCB</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line">BS = <span class="number">16</span></span><br><span class="line">FLAG=<span class="string">b&#x27;cnss&#123;..........................................&#125;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(FLAG) == <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line">BANNER=<span class="string">br&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Welcome to CNSS Crypto Service! </span></span><br><span class="line"><span class="string">  ____ _   _ ____ ____ </span></span><br><span class="line"><span class="string"> / ___| \ | / ___/ ___| </span></span><br><span class="line"><span class="string">| |   |  \| \___ \___ \ </span></span><br><span class="line"><span class="string">| |___| |\  |___) |__) |</span></span><br><span class="line"><span class="string"> \____|_| \_|____/____/ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">All the string variables you send/recieve should/would be in hex form and be n * 16 bytes.</span></span><br><span class="line"><span class="string">For example, 65392825175610104412735799271089255734</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">MENU = <span class="string">br&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1] Encrypt</span></span><br><span class="line"><span class="string">[2] Decrypt</span></span><br><span class="line"><span class="string">[3] Show Encryption History</span></span><br><span class="line"><span class="string">[4] Exit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> s + (BS - <span class="built_in">len</span>(s) % BS) * long_to_bytes(BS - <span class="built_in">len</span>(s) % BS) </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unpad</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">0</span>:-s[-<span class="number">1</span>]]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">col</span>(<span class="params">a, c</span>):</span><br><span class="line">    <span class="keyword">return</span> [a[i][c] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Scheme</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,key</span>):</span><br><span class="line">        self.key = key</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self,raw</span>):</span><br><span class="line">        raw = pad(raw)</span><br><span class="line">        raw = md5(raw).digest() + raw</span><br><span class="line"></span><br><span class="line">        iv = Random.new().read(BS)</span><br><span class="line">        cipher = AES.new(self.key,AES.MODE_CBC,iv)</span><br><span class="line">        <span class="keyword">return</span> (iv + cipher.encrypt(raw)).<span class="built_in">hex</span>().encode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self,enc</span>):</span><br><span class="line">        enc = <span class="built_in">bytes</span>.fromhex(enc.decode())</span><br><span class="line"></span><br><span class="line">        iv = enc[:BS]</span><br><span class="line">        enc = enc[BS:]</span><br><span class="line"></span><br><span class="line">        cipher = AES.new(self.key,AES.MODE_CBC,iv)</span><br><span class="line">        blob = cipher.decrypt(enc)</span><br><span class="line"></span><br><span class="line">        checksum = blob[:BS]</span><br><span class="line">        data = blob[BS:]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> md5(data).digest() == checksum:</span><br><span class="line">            <span class="keyword">return</span> unpad(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    encrypt_history = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">type</span>(msg)==<span class="built_in">str</span>: msg=msg.encode()</span><br><span class="line">            <span class="keyword">if</span> newline: msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, text, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(text, newline=<span class="literal">False</span>)</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recvhex</span>(<span class="params">self, text, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(self.recv(text, prompt=prompt).decode(<span class="string">&#x27;latin-1&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, ocb</span>):</span><br><span class="line">        N = self.recvhex(<span class="string">b&#x27;nonce&#x27;</span>)</span><br><span class="line">        M = self.recvhex(<span class="string">b&#x27;plain&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> N <span class="keyword">in</span> col(self.encrypt_history, <span class="number">0</span>) <span class="keyword">or</span> M <span class="keyword">in</span> col(self.encrypt_history, <span class="number">0</span>) <span class="keyword">or</span> N==M:</span><br><span class="line">            self.send(<span class="string">&#x27;Illegal Encryption Request!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span>()</span><br><span class="line">        </span><br><span class="line">        C, T = ocb.encrypt(N, M)</span><br><span class="line">        self.encrypt_history.append([N, C, T])</span><br><span class="line">        self.send(<span class="string">f&#x27;cipher: <span class="subst">&#123;C.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line">        self.send(<span class="string">f&#x27;tag: <span class="subst">&#123;T.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, ocb</span>):</span><br><span class="line">        N = self.recvhex(<span class="string">b&#x27;nonce&#x27;</span>)</span><br><span class="line">        C = self.recvhex(<span class="string">b&#x27;cipher&#x27;</span>)</span><br><span class="line">        T = self.recvhex(<span class="string">b&#x27;tag&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> C <span class="keyword">in</span> col(self.encrypt_history, <span class="number">1</span>):</span><br><span class="line">            self.send(<span class="string">&#x27;Illegal Decryption Request!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span>()</span><br><span class="line">        auth, M = ocb.decrypt(N, C, T)</span><br><span class="line">        self.send(<span class="string">f&#x27;auth: <span class="subst">&#123;auth&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> auth:</span><br><span class="line">            self.send(<span class="string">f&#x27;plain: <span class="subst">&#123;M.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">serve</span>(<span class="params">self, isAdmin = <span class="literal">False</span></span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.send(MENU, newline = <span class="literal">False</span>)</span><br><span class="line">            option = <span class="built_in">int</span>(self.recv(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> option == <span class="number">1</span>:</span><br><span class="line">                self.encrypt(self.ocb)</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="number">2</span>:</span><br><span class="line">                self.decrypt(self.ocb)</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">if</span> isAdmin:</span><br><span class="line">                    <span class="keyword">for</span> record <span class="keyword">in</span> self.encrypt_history:</span><br><span class="line">                        self.send(<span class="string">&quot;#&quot;</span>*<span class="number">20</span>)</span><br><span class="line">                        self.send(<span class="string">f&#x27;nonce: <span class="subst">&#123;record[<span class="number">0</span>].<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line">                        self.send(<span class="string">f&#x27;cipher: <span class="subst">&#123;record[<span class="number">1</span>].<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line">                        self.send(<span class="string">f&#x27;tag: <span class="subst">&#123;record[<span class="number">2</span>].<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.send(<span class="string">&quot;Permission Denied! Only admin can use this option.&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):</span><br><span class="line">        key = Random.new().read(BS)</span><br><span class="line">        scheme = Scheme(key)</span><br><span class="line">        self.ocb = OCB(urandom(<span class="number">16</span>))</span><br><span class="line">        N = urandom(<span class="number">16</span>)</span><br><span class="line">        C, T = self.ocb.encrypt(N, FLAG)</span><br><span class="line">        self.encrypt_history.append([N, C, T])</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.send(<span class="string">&quot;Please [r]egister or [l]ogin&quot;</span>)</span><br><span class="line">            cmd = self.recv(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">b&#x27;r&#x27;</span>:</span><br><span class="line">                name = self.recv(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">len</span>(name) &gt; <span class="number">32</span>):</span><br><span class="line">                    self.send(<span class="string">b&#x27;Username too long!&#x27;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> pad(name) == pad(<span class="string">b&#x27;admin&#x27;</span>):</span><br><span class="line">                    self.send(<span class="string">b&#x27;You cannot use this name!&#x27;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.send(<span class="string">b&#x27;Here is your token:&#x27;</span>)</span><br><span class="line">                    self.send(scheme.encrypt(name))</span><br><span class="line">            <span class="keyword">elif</span> cmd == <span class="string">b&#x27;l&#x27;</span>:</span><br><span class="line">                data = self.recv(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">                <span class="keyword">try</span>: </span><br><span class="line">                    name = scheme.decrypt(data)</span><br><span class="line">                <span class="keyword">except</span>: </span><br><span class="line">                    self.send(<span class="string">&quot;Illegal Token!&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> name == <span class="string">b&#x27;admin&#x27;</span>:</span><br><span class="line">                    self.send(<span class="string">b&#x27;Welcome admin!&#x27;</span>)</span><br><span class="line">                    self.serve(<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.send(<span class="string">f&#x27;Welcome <span class="subst">&#123;name.decode()&#125;</span>!&#x27;</span>)</span><br><span class="line">                    self.serve()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;Unknown cmd!&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.send(BANNER)</span><br><span class="line">            self.login()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.send(<span class="string">b&#x27;What\&#x27;s wrong???&#x27;</span>)</span><br><span class="line">            self.request.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">HOST, PORT = <span class="string">&#x27;47.113.199.200&#x27;</span>, <span class="number">20000</span></span><br><span class="line">server = ThreadedServer((HOST, PORT), Task)</span><br><span class="line">server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></div></figure><p>È¢òÁõÆÊúâ‰∏§‰∏™ËÄÉÂØüÁÇπ</p><p>Á¨¨‰∏Ä‰∏™ÊòØÂà©Áî® $AES-CBC$ ÁøªËΩ¨ÊîªÂáªÊù•‰º™ÈÄ† $token$ ÁôªÂΩï $admin$ ÔºåËøõËÄåËé∑Âèñ $flag$ ÁªèËøá $OCB2$ Âä†ÂØÜÂêéÂæóÂà∞ÁöÑ $nonce„ÄÅcipher„ÄÅtag$</p><p>Á¨¨‰∫å‰∏™ÊòØ $OCB2$ ÁöÑ $Plaintext\ Recovery$ ÔºåÂõ†‰∏∫Êàë‰ª¨Âπ∂‰∏çËÉΩÁõ¥Êé•Âà©Áî®Á≥ªÁªüÁöÑ $decrypt$ Êù•ËøõË°åËß£ÂØÜÔºåÊâÄ‰ª•Â∞±ÈúÄË¶ÅÈÄöËøá‰∏ÄÁ≥ªÂàóÊûÑÈÄ†Êù•ÁªïËøáÈôêÂà∂Êù°‰ª∂ËøõË°åËß£ÂØÜ</p><p>È¶ñÂÖàÊòØ $AES-CBC$ ÁøªËΩ¨ÊîªÂáª</p><p>Âú®<span class="exturl"><a class="exturl__link"   href="https://www.xctf.org.cn/library/details/65f4adfaa1802e6575625492d5bc59f6f740c666/" >0CTF2017</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>ÊâæÂà∞‰∫Ü‰∏ÄÈÅìÁ±ª‰ººÁöÑÈ¢òÁõÆÔºåÂ§ßËá¥ÊÄùÊÉ≥Â∞±ÊòØÂà©Áî® $AES-CBC$ ÂàÜÁªÑÂä†ÂØÜÂπ∂‰∏îÊØè‰∏ÄÁªÑÁöÑÂä†ÂØÜ‰æùÈù†ÁöÑÊòØ‰∏ä‰∏ÄÁªÑÂØÜÊñáÁöÑÁâπÊÄßÊù•ËøõË°å‰º™ÈÄ†</p><p>‰ª• $admin$ Ë∫´‰ªΩÁôªÂΩïÂêéÂèñÂæó $nonce„ÄÅcipher„ÄÅtag$ </p><p>Êé•‰∏ãÊù•Â∞±Ë¶ÅÁî®Âà∞ $OCB2$ ÁöÑ $Plaintext\ Recovery$ </p><p>ÊúÄÂàùÊâæÂà∞‰∫Ü‰∏ÄÁØáËÆ∫Êñá<span class="exturl"><a class="exturl__link"   href="https://eprint.iacr.org/2018/1090.pdf" >Plaintext Recovery Attack of OCB2</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>Âíå‰∏ÄÈÅìÁ±ª‰ººÁöÑÈ¢ò<span class="exturl"><a class="exturl__link"   href="https://blog.react0r.com/2019/12/06/cryptography-attacking-ocb2/" >Cryptography: Attacking OCB2 ‚Äì react0r blog</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>ÔºåÁúãÂÆåÂêéÂü∫Êú¨‰∏äÂ∑≤ÁªèÊúâ‰∫ÜÊÄùË∑ØÔºåÁÑ∂ÂêéÂà©Áî®<span class="exturl"><a class="exturl__link"   href="https://github.com/oalieno/OCB2-POC" >github</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>‰∏äÊâæÂà∞ÁöÑ‰ª£Á†ÅÊàêÂäüËß£ÂÜ≥</p><p>ÊúÄÂêéÁöÑËß£È¢ò‰ª£Á†ÅÊúâÁÇπÂ∞èbugÔºåsendlineÂèëÁöÑÂ§™Âø´ÂÆπÊòìÂØºËá¥È°∫Â∫èÈîô‰π±ÔºåËøòÊ≤°Êù•ÂæóÂèäËß£ÂÜ≥ÔºåÊöÇÊó∂Áî®Ë∞ÉËØïÈ°∂Êõø‰∫Ü‰∏Ä‰∏ã„ÄÇ</p><p>ÂÆåÊï¥‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> block <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> s + (BS - <span class="built_in">len</span>(s) % BS) * long_to_bytes(BS - <span class="built_in">len</span>(s) % BS)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bxor</span>(<span class="params">b1, b2</span>): <span class="comment"># use xor for bytes</span></span><br><span class="line">    parts = []</span><br><span class="line">    <span class="keyword">for</span> b1, b2 <span class="keyword">in</span> <span class="built_in">zip</span>(b1, b2):</span><br><span class="line">        parts.append(<span class="built_in">bytes</span>([b1 ^ b2]))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span>.join(parts)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_as_admin</span>():</span><br><span class="line">    <span class="comment"># login as admin</span></span><br><span class="line">    p.sendline(<span class="string">b&#x27;r&#x27;</span>)</span><br><span class="line">    p.sendline(md5(pad(<span class="string">b&#x27;admin&#x27;</span>)).digest() + <span class="string">b&#x27;admin&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(md5(pad(<span class="string">b&#x27;admin&#x27;</span>)).digest() + <span class="string">b&#x27;admin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    token = recv.strip()</span><br><span class="line">    <span class="built_in">print</span>(token.encode())</span><br><span class="line">    mytoken = token[<span class="number">32</span>:]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(mytoken), <span class="built_in">type</span>(mytoken))</span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="string">b&#x27;l&#x27;</span>)</span><br><span class="line">    p.sendline(mytoken.encode())</span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_NCT</span>():</span><br><span class="line">    p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    nonce = Block(<span class="built_in">bytes</span>.fromhex(recv[<span class="number">7</span>:]))</span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    cipher = Block(<span class="built_in">bytes</span>.fromhex(recv[<span class="number">8</span>:]))</span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    tag = Block(<span class="built_in">bytes</span>.fromhex(recv[<span class="number">5</span>:]))</span><br><span class="line">    <span class="keyword">return</span> nonce, cipher, tag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">nonce, message</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        recv = p.recvline().decode()</span><br><span class="line">        <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendline(nonce.encode())</span><br><span class="line">    p.sendline(message.encode())</span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    <span class="built_in">print</span>(recv[<span class="number">24</span>:])</span><br><span class="line">    cipher = Block(<span class="built_in">bytes</span>.fromhex(recv[<span class="number">24</span>:]))</span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;tag = &#x27;</span> + recv[<span class="number">5</span>:])</span><br><span class="line">    tag = Block(<span class="built_in">bytes</span>.fromhex(recv[<span class="number">5</span>:]))</span><br><span class="line">    <span class="keyword">return</span> cipher, tag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">nonce, cipher, tag</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;begin decrypt&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        recv = p.recvline().decode()</span><br><span class="line">        <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendline(nonce.encode())</span><br><span class="line">    p.sendline(cipher.encode())</span><br><span class="line">    p.sendline(tag.encode())</span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line">    plain = Block(<span class="built_in">bytes</span>.fromhex(recv[<span class="number">7</span>:]))</span><br><span class="line">    <span class="keyword">return</span> plain</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">randomMapping</span>(<span class="params">n</span>):</span><br><span class="line">    N = Block.random(<span class="number">16</span>)</span><br><span class="line">    M = Block.random(n * <span class="number">16</span>) + Block.<span class="built_in">len</span>(<span class="number">16</span>) + Block.random(<span class="number">16</span>)</span><br><span class="line">    C, T = encrypt(N.<span class="built_in">hex</span>(), M.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line">    S = Block.zero()</span><br><span class="line">    C_ = Block()</span><br><span class="line">    T_ = M[n + <span class="number">1</span>] ^ C[n + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        C_ += C[i]</span><br><span class="line">        S ^= M[i]</span><br><span class="line">    C_ += (S ^ C[n] ^ Block.<span class="built_in">len</span>(<span class="number">16</span>))</span><br><span class="line">    M_ = decrypt(N.<span class="built_in">hex</span>(), C_.<span class="built_in">hex</span>(), T_.<span class="built_in">hex</span>())</span><br><span class="line">    <span class="comment"># assert auth</span></span><br><span class="line"></span><br><span class="line">    S = Block.zero()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        S ^= M[i]</span><br><span class="line">    L = (S ^ M_[n] ^ Block.<span class="built_in">len</span>(<span class="number">16</span>)).half(n + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    mappings = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        mappings.append((M[i] ^ L.double(i + <span class="number">1</span>), C[i] ^ L.double(i + <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mappings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">specificMapping</span>(<span class="params">Is</span>):</span><br><span class="line">    N, L = randomMapping(<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">len</span>(Is)</span><br><span class="line">    M = Block()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        M += (Is[i] ^ L.double(i + <span class="number">1</span>))</span><br><span class="line">    M += Block.zero()</span><br><span class="line">    C, T = encrypt(N.<span class="built_in">hex</span>(), M.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line">    Os = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        Os.append(C[i] ^ L.double(i + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recovery</span>(<span class="params">N, C, T</span>):</span><br><span class="line">    L = specificMapping([N])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    n = C.blocksize()</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        Y = specificMapping([Block.<span class="built_in">len</span>(<span class="number">16</span>) ^ L.double()])</span><br><span class="line">        M_ = Y[<span class="number">0</span>] ^ C[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">        Y = specificMappingInv([C[<span class="number">0</span>] ^ L.double()])</span><br><span class="line">        M_ = Y[<span class="number">0</span>] ^ L.double()</span><br><span class="line">        Y = specificMapping([Block.<span class="built_in">len</span>(<span class="number">16</span>) ^ L.double(<span class="number">2</span>)])</span><br><span class="line">        M_ += Y[<span class="number">0</span>] ^ C[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        L_ = L.double() ^ L.double(<span class="number">2</span>)</span><br><span class="line">        C[<span class="number">0</span>], C[<span class="number">1</span>] = C[<span class="number">1</span>] ^ L_, C[<span class="number">0</span>] ^ L_</span><br><span class="line">        M_ = decrypt(N.<span class="built_in">hex</span>(), C.<span class="built_in">hex</span>(), T.<span class="built_in">hex</span>())</span><br><span class="line">        M_[<span class="number">0</span>], M_[<span class="number">1</span>] = M_[<span class="number">1</span>] ^ L_, M_[<span class="number">0</span>] ^ L_</span><br><span class="line">    <span class="keyword">return</span> M_</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;47.113.199.200&#x27;</span>, <span class="number">20000</span>)</span><br><span class="line">BS = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># receive BANNER</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line"></span><br><span class="line">login_as_admin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    recv = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(recv.strip())</span><br><span class="line"></span><br><span class="line">N, C, T = get_NCT()</span><br><span class="line"></span><br><span class="line">flag = recovery(N, C, T)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(flag.<span class="built_in">hex</span>()).decode())</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>ÊúÄÂêéÂæóÂà∞flag:</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnss&#123;0CB2_1S_N0t_S3cUR3__US3_OcB3_1NST34D!!!!!!&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h1 id=&quot;CNSSÊãõÊñ∞È¢ò-crypto-writeup&quot;   &gt;
          &lt;a href=&quot;#CNSSÊãõÊñ∞È¢ò-crypto-writeup&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://freeman-cc.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>AegisÊãõÊñ∞È¢ò-crypto-writeup</title>
    <link href="https://freeman-cc.github.io/2022/04/10/Aegis%E6%8B%9B%E6%96%B0%E9%A2%98-crypto-writeup/"/>
    <id>https://freeman-cc.github.io/2022/04/10/Aegis%E6%8B%9B%E6%96%B0%E9%A2%98-crypto-writeup/</id>
    <published>2022-04-10T06:00:50.000Z</published>
    <updated>2022-04-10T06:03:21.228Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="AegisÊãõÊñ∞È¢ò-crypto-writeup"   >          <a href="#AegisÊãõÊñ∞È¢ò-crypto-writeup" class="heading-link"><i class="fas fa-link"></i></a><a href="#AegisÊãõÊñ∞È¢ò-crypto-writeup" class="headerlink" title="AegisÊãõÊñ∞È¢ò-crypto-writeup"></a>AegisÊãõÊñ∞È¢ò-crypto-writeup</h1>      <blockquote><p>Ccc</p></blockquote>        <h2 id="KinokoÁöÑ‰ª£Á†Å-I"   >          <a href="#KinokoÁöÑ‰ª£Á†Å-I" class="heading-link"><i class="fas fa-link"></i></a><a href="#KinokoÁöÑ‰ª£Á†Å-I" class="headerlink" title="KinokoÁöÑ‰ª£Á†Å I"></a>KinokoÁöÑ‰ª£Á†Å I</h2>      <p>Ê∫ê‰ª£Á†ÅÔºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="built_in">int</span>(sqrt(n+<span class="number">1</span>)+<span class="number">1</span>), <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> is_prime(n):</span><br><span class="line">            <span class="built_in">print</span>(n)</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        n += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">seed = <span class="number">0x5eed</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    seed &lt;&lt;= <span class="number">16</span></span><br><span class="line">    seed += <span class="number">1</span></span><br><span class="line">    seed = next_prime(seed)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag is Aegis&#123;%s&#125;&quot;</span> % (<span class="built_in">hex</span>(seed)[-<span class="number">32</span>:]))</span><br></pre></td></tr></table></div></figure><p>ËØªÂÆå‰ª£Á†ÅÂêéÂèëÁé∞ÊòØËÆ©ÊîπËøõÁ¥†Êï∞Âà§Âà´ÂáΩÊï∞ÔºåÈôç‰ΩéÊó∂Èó¥Â§çÊùÇÂ∫¶ÔºåÁõ¥Êé•Â∞ÜÂéüÂáΩÊï∞Ê≥®ÈáäÊéâÔºåË∞ÉÁî®gmpy2ÁöÑis_primeÂáΩÊï∞Âç≥ÂèØÔºàÂÅ∑Êáí‰∫ÜÔºåÈ¢òÁõÆÂ∫îËØ•ÊòØÊÉ≥ËÄÉÂØüMiller-RabinÁ¥†ÊÄßÊ£ÄÊµãÁÆóÊ≥ïÔºâ</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> is_prime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> is_prime(n):</span><br><span class="line">            <span class="built_in">print</span>(n)</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        n += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">seed = <span class="number">0x5eed</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    seed &lt;&lt;= <span class="number">16</span></span><br><span class="line">    seed += <span class="number">1</span></span><br><span class="line">    seed = next_prime(seed)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag is Aegis&#123;%s&#125;&quot;</span> % (<span class="built_in">hex</span>(seed)[-<span class="number">32</span>:]))</span><br></pre></td></tr></table></div></figure>        <h2 id="KinokoÁöÑ‰ª£Á†Å-II"   >          <a href="#KinokoÁöÑ‰ª£Á†Å-II" class="heading-link"><i class="fas fa-link"></i></a><a href="#KinokoÁöÑ‰ª£Á†Å-II" class="headerlink" title="KinokoÁöÑ‰ª£Á†Å II"></a>KinokoÁöÑ‰ª£Á†Å II</h2>      <p>Ê∫ê‰ª£Á†ÅÔºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">phi</span>(<span class="params">n</span>):</span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">ans = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n % i == <span class="number">0</span>:</span><br><span class="line">n //= i</span><br><span class="line">ans *= i</span><br><span class="line">ans //= i</span><br><span class="line">ans *= i - <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> ans * phi(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">common</span>(<span class="params">x, y</span>):</span><br><span class="line"><span class="keyword">if</span> x &gt; y:</span><br><span class="line">x, y = y, x</span><br><span class="line">i = <span class="number">2</span></span><br><span class="line">ans = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= x:</span><br><span class="line"><span class="keyword">while</span> x % i == <span class="number">0</span> <span class="keyword">and</span> y % i == <span class="number">0</span>:</span><br><span class="line">x //= i</span><br><span class="line">y //= i</span><br><span class="line">ans *= i</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">i, n</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, phi(n)):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">pow</span>(i, j, n) == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">67108934</span></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">pow</span>(i, phi(n), n) == <span class="number">1</span> <span class="keyword">and</span> common(i, n) == <span class="number">1</span> <span class="keyword">and</span> check(i, n):</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">total += i</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Flag is Aegis&#123;%d&#125;&quot;</span> % (total))</span><br></pre></td></tr></table></div></figure><p>È¶ñÂÖàÂàÜÊûê‰ª£Á†ÅÔºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">phi(n)<span class="comment"># ËÆ°ÁÆónÁöÑÊ¨ßÊãâÂáΩÊï∞ÂÄº</span></span><br><span class="line">common(x, y)<span class="comment"># ËÆ°ÁÆóx, yÁöÑÊúÄÂ§ßÂÖ¨Âõ†Êï∞</span></span><br><span class="line">check(i, n)<span class="comment"># Âà§Êñ≠iÊòØÂê¶ÊòØnÁöÑÂéüÊ†π</span></span><br></pre></td></tr></table></div></figure><p>ÂàÜÊûêÂÆå‰ª£Á†ÅÂèØ‰ª•Áü•ÈÅìÈ¢òÁõÆÊòØËÆ©Ê±Ç$n = 67108934$ÁöÑÊâÄÊúâÂéüÊ†πÁöÑÂíå</p><p><strong>ËøôÈáåÈúÄË¶ÅÁî®Âà∞ÂéüÊ†πÁöÑÊï∞Â≠¶Áü•ËØÜ</strong></p><blockquote><p>ÊúÄÂ∞èÂéüÊ†πÊòØ‰∏çÂ§ß‰∫é $\sqrt[4]{m}$ Á∫ßÂà´ÁöÑ„ÄÇ</p><p>Âõ†Ê≠§Ôºå‰∏çÂ¶®Êûö‰∏æ$ [1, \sqrt[4]{m}] $ÁöÑÊï¥Êï∞ÔºåÂæóÂà∞ÊúÄÂ∞èÂéüÊ†π g„ÄÇ</p><p>ÂÜçÊûö‰∏æ $g^s$ ÁöÑÊåáÊï∞ $s$ÔºåËã• $s$ ‰∏é $œÜ(m)$ ‰∫íË¥®ÔºåÂàô$g^smodm$ ‰∏∫‰∏Ä‰∏™ÂéüÊ†π„ÄÇ</p><p>Áî±Ê≠§ÂèØÁü•ÔºåÂ¶ÇÊûúÊï∞ $m$ Â≠òÂú®ÂéüÊ†πÔºåÂàôÂéüÊ†πÁöÑ‰∏™Êï∞‰∏∫ œÜ(œÜ(m))</p></blockquote><p>È¶ñÂÖàÊûö‰∏æÊ±ÇÂæónÊúÄÂ∞èÁöÑÂéüÊ†π‰∏∫7</p><p>ÁÑ∂ÂêéÈÅçÂéÜÊ±ÇÂíåÂç≥ÂèØ</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line">n = <span class="number">67108934</span></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line">phin = <span class="number">33554466</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, phin):</span><br><span class="line">    <span class="keyword">if</span> gcd(i, phin) == <span class="number">1</span>:</span><br><span class="line">        total += <span class="built_in">pow</span>(<span class="number">7</span>, i, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag is Aegis&#123;%d&#125;&quot;</span> % total)</span><br></pre></td></tr></table></div></figure>        <h2 id="KinokoÁöÑ‰ª£Á†Å-III"   >          <a href="#KinokoÁöÑ‰ª£Á†Å-III" class="heading-link"><i class="fas fa-link"></i></a><a href="#KinokoÁöÑ‰ª£Á†Å-III" class="headerlink" title="KinokoÁöÑ‰ª£Á†Å III"></a>KinokoÁöÑ‰ª£Á†Å III</h2>      <p>Ê∫ê‰ª£Á†ÅÔºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">P = <span class="number">0x7fffffff</span></span><br><span class="line">Q = <span class="number">0x100</span></span><br><span class="line">n = <span class="number">0x100</span></span><br><span class="line">a = [(i ** (i ** i)) % P <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> product(a, repeat=<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> reduce(add, x) % Q == <span class="number">0</span>:</span><br><span class="line">        res += reduce(mul, x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag is Aegis&#123;%d&#125;&quot;</span> % (res % (P * Q)))</span><br></pre></td></tr></table></div></figure><p>Â∞ùËØïÁî®Âø´ÈÄüÂπÇËÆ°ÁÆóÂá∫‰∫ÜaÔºåÂêéÈù¢ÁöÑÈÉ®ÂàÜÂ∞±Ê≤°ÊúâÊÄùË∑Ø‰∫ÜÔºåÊÑüËßâË∑ü $GF(2^m)$ ÊúâÂÖ≥„ÄÇ</p>        <h2 id="KinokoÁöÑ‰ª£Á†Å-IV"   >          <a href="#KinokoÁöÑ‰ª£Á†Å-IV" class="heading-link"><i class="fas fa-link"></i></a><a href="#KinokoÁöÑ‰ª£Á†Å-IV" class="headerlink" title="KinokoÁöÑ‰ª£Á†Å IV"></a>KinokoÁöÑ‰ª£Á†Å IV</h2>      <p>Ê∫ê‰ª£Á†ÅÔºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">msg = <span class="string">b&#x27;......&#x27;</span></span><br><span class="line">g = <span class="number">23</span></span><br><span class="line">p = <span class="number">335215034881592512312398694238485179340610060759881511231472142277527176340784432381542726029524727833039074808456839870641607412102746854257629226877248337002993023452385472058106944014653401647033456174126976474875859099023703472904735779212010820524934972736276889281087909166017427905825553503050645575935980580803899122224368875197728677516907272452047278523846912786938173456942568602502013001099009776563388736434564541041529106817380347284002060811645842312648498340150736573246893588079033524476111268686138924892091575797329915240849862827621736832883215569687974368499436632617425922744658912248644475097139485785819369867604176912652851123185884810544172785948158330991257118563772736929105360124222843930130347670027236797458715653361366862282591170630650344062377644570729478796795124594909835004189813214758026703689710017334501371279295621820181402191463184275851324378938021156631501330660825566054528793444353</span></span><br><span class="line">x = bytes_to_long(msg)</span><br><span class="line">h = <span class="built_in">pow</span>(g,x,p)</span><br><span class="line"><span class="built_in">print</span>(h)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">179956689939799978686596162623009071834749620910632881129570185702597885675366053746660084250822996742213156358846254579536681385720261821941496018561712101559148720253943504890341017743734982584598207516433225345830605843249917382020797858837178839235576965252932584506546764681169682067451758822339982991607788445472451090172187831874941209496749224595861824389402308122683468407022055642183997505151642262281735659513608920324853368172095765041692780083964849712368477052130574239545836322863774186581648844719904538237553913580382934907373884521762228204915991345935021715751152215665694954681931730050491031883519789246541180580522272095192525557554130071875996891173839573092163026966683532806284169788149085982141065261043806380173094680150058915109078775560035635889930619074748416389716690011996098383845646464047453083163083103550738288711630170975733999017234569638947005463854359023927470291784650805324521819096823</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></div></figure><p>ËÄÉÂØüÁ¶ªÊï£ÂØπÊï∞Ê±ÇËß£ÁöÑÁü•ËØÜÔºåÁõ¥Êé•Ë∞ÉÁî®sage‰∏≠ÁöÑ$discrete_log()$ÂáΩÊï∞Ê±ÇËß£xÔºåÂÜçËΩ¨Êç¢‰∏∫bytesÂç≥ÂèØ</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">c = 179956689939799978686596162623009071834749620910632881129570185702597885675366053746660084250822996742213156358846254579536681385720261821941496018561712101559148720253943504890341017743734982584598207516433225345830605843249917382020797858837178839235576965252932584506546764681169682067451758822339982991607788445472451090172187831874941209496749224595861824389402308122683468407022055642183997505151642262281735659513608920324853368172095765041692780083964849712368477052130574239545836322863774186581648844719904538237553913580382934907373884521762228204915991345935021715751152215665694954681931730050491031883519789246541180580522272095192525557554130071875996891173839573092163026966683532806284169788149085982141065261043806380173094680150058915109078775560035635889930619074748416389716690011996098383845646464047453083163083103550738288711630170975733999017234569638947005463854359023927470291784650805324521819096823</span><br><span class="line">m = 23</span><br><span class="line">n = 335215034881592512312398694238485179340610060759881511231472142277527176340784432381542726029524727833039074808456839870641607412102746854257629226877248337002993023452385472058106944014653401647033456174126976474875859099023703472904735779212010820524934972736276889281087909166017427905825553503050645575935980580803899122224368875197728677516907272452047278523846912786938173456942568602502013001099009776563388736434564541041529106817380347284002060811645842312648498340150736573246893588079033524476111268686138924892091575797329915240849862827621736832883215569687974368499436632617425922744658912248644475097139485785819369867604176912652851123185884810544172785948158330991257118563772736929105360124222843930130347670027236797458715653361366862282591170630650344062377644570729478796795124594909835004189813214758026703689710017334501371279295621820181402191463184275851324378938021156631501330660825566054528793444353</span><br><span class="line">d=discrete_log(c,mod(m,n))</span><br><span class="line">msg = long_to_bytes(d)</span><br><span class="line">print(msg)</span><br></pre></td></tr></table></div></figure>        <h2 id="notRSA"   >          <a href="#notRSA" class="heading-link"><i class="fas fa-link"></i></a><a href="#notRSA" class="headerlink" title="notRSA"></a>notRSA</h2>      <p>Ê∫ê‰ª£Á†ÅÔºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">flag = <span class="string">b&#x27;Aegis&#123;......&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, <span class="number">2</span>, n)</span><br><span class="line"><span class="built_in">print</span>(p**<span class="number">3</span>+q**<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(p*q-p-q)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = 9294245038014495018370025503838233837842445450717112861530019994089208464544256432365138864858019427603469395634623982915723003321692974199306043896395471</span></span><br><span class="line"><span class="comment"># q = 12342761514228429158263998414220938515337038241757334937761557332062702646597784278541920751268963691194708568191829119140194036616936954532285327408748239</span></span><br><span class="line"><span class="comment">#2683207403901766067825485634185601766409570143649318199140952968037512600470579376068383383524815864039841298998044483348310172352574406995610031363899276749157640097193160488032526253335175497216620520711500711141110234147693948098688349034232723537263489946840300271580577412796742296691684971450119145954769829625063379511509190333209177419150804570514746916533943674944751821667853376532291018641849933876951962902976903371221223111423718945634451076584248030</span></span><br><span class="line"><span class="comment">#114716649959013852657615268840231124447472690710601678501437134218521741792245535933871147569266364478277891322010833300443127314646898434178369690377612566380887447356076682596113975161733897245200003941284379586690945264751249879210669330319947878473291341185035678293547495739763970613403135670992913681859</span></span><br><span class="line"><span class="comment">#23588520303183909632881265716945062770267850520083979450971468612710595466903076931312046174728593508895307445955963477450821781428035995913285067064035796132808196500567866710084350514597397699053074465810242481186367241</span></span><br></pre></td></tr></table></div></figure><p>ËØª‰ª£Á†ÅÂêéÂèëÁé∞ $e=2$, ÂæàÊòéÊòæÁöÑ $Rabin$ Âä†ÂØÜÔºåÂà©Áî®È¢òÁõÆ‰∏≠ÁªôÂá∫ÁöÑ $p^3+q^3$ Âíå $pq-p-q$ ËÅîÁ´ãÊñπÁ®ãËß£Âá∫ $p, q$ Âç≥ÂèØ</p><p>ÂÖ¨ÂºèÊé®ÂØºÂ¶Ç‰∏ãÔºö</p><script type="math/tex; mode=display">\begin{aligned}&\begin{aligned}p^3 + q^3 &= (p+q)(p^2+q^2-pq)\\    &=(p+q)[(p+q)^2-3pq]\\    &=(p+q)^3-3(p+q)*pq\end{aligned}\\&pq-p-q=pq -(p+q)\\\\&‰ª§a = p+q, b= pqÂèØ‰ª•ÂàóÂá∫ÊñπÁ®ãÁªÑ:\\&\left\{\begin{aligned}&a^3 - 3ab = p^3 + q^3\\&b -a = pq-(p+q)\end{aligned}\right.\\\\&Ëß£Âá∫a,bÂêéÊàë‰ª¨ÂèØ‰ª•ÁªßÁª≠ÂàóÂá∫Â¶Ç‰∏ãÊñπÁ®ã:\\&x^2 - ax + b = 0\\&ÊñπÁ®ãÁöÑ‰∏§Ê†πÂç≥‰∏∫p,q\end{aligned}</script><p>Ê±ÇËß£ $p, q$ ÁöÑ‰ª£Á†ÅÂ¶Ç‰∏ãÔºöÔºàÊ≠§Â§ÑËÆæ$a = p^3+q^3,b = pq-p-q$)</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy <span class="keyword">as</span> sp</span><br><span class="line">a = <span class="number">2683207403901766067825485634185601766409570143649318199140952968037512600470579376068383383524815864039841298998044483348310172352574406995610031363899276749157640097193160488032526253335175497216620520711500711141110234147693948098688349034232723537263489946840300271580577412796742296691684971450119145954769829625063379511509190333209177419150804570514746916533943674944751821667853376532291018641849933876951962902976903371221223111423718945634451076584248030</span></span><br><span class="line">b = <span class="number">114716649959013852657615268840231124447472690710601678501437134218521741792245535933871147569266364478277891322010833300443127314646898434178369690377612566380887447356076682596113975161733897245200003941284379586690945264751249879210669330319947878473291341185035678293547495739763970613403135670992913681859</span></span><br><span class="line">p = [<span class="number">1</span>, -<span class="number">3</span>, -<span class="number">3</span>*b, -a]</span><br><span class="line"></span><br><span class="line">x = sp.Symbol(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">f = x**<span class="number">3</span> + p[<span class="number">1</span>]*x**<span class="number">2</span> + p[<span class="number">2</span>]*x + p[<span class="number">3</span>]</span><br><span class="line">s = sp.solve(f)</span><br><span class="line"><span class="comment"># print(s[0])</span></span><br><span class="line"></span><br><span class="line">pq = s[<span class="number">0</span>]+b</span><br><span class="line">q = [<span class="number">1</span>, -s[<span class="number">0</span>], pq]</span><br><span class="line">y = sp.Symbol(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">g = y**<span class="number">2</span> + q[<span class="number">1</span>]*y + q[<span class="number">2</span>]</span><br><span class="line">solve = sp.solve(g)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p = &#x27;</span> + <span class="built_in">str</span>(solve[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q = &#x27;</span> + <span class="built_in">str</span>(solve[<span class="number">1</span>]))</span><br></pre></td></tr></table></div></figure><p>ËøêË°åÂêéËß£Âá∫$p,q$</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">9294245038014495018370025503838233837842445450717112861530019994089208464544256432365138864858019427603469395634623982915723003321692974199306043896395471</span></span><br><span class="line">q = <span class="number">12342761514228429158263998414220938515337038241757334937761557332062702646597784278541920751268963691194708568191829119140194036616936954532285327408748239</span></span><br></pre></td></tr></table></div></figure><p>Êé•‰∏ãÊù•Â∞Ü $p,q$ ‰ª£ÂÖ•ËøõË°å $Rabin$ Ëß£ÂØÜÂç≥ÂèØ</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">2</span></span><br><span class="line">c = <span class="number">23588520303183909632881265716945062770267850520083979450971468612710595466903076931312046174728593508895307445955963477450821781428035995913285067064035796132808196500567866710084350514597397699053074465810242481186367241</span></span><br><span class="line">p = <span class="number">9294245038014495018370025503838233837842445450717112861530019994089208464544256432365138864858019427603469395634623982915723003321692974199306043896395471</span></span><br><span class="line">q = <span class="number">12342761514228429158263998414220938515337038241757334937761557332062702646597784278541920751268963691194708568191829119140194036616936954532285327408748239</span></span><br><span class="line">n = p*q</span><br><span class="line">u = <span class="built_in">pow</span>(c, (p+<span class="number">1</span>)//<span class="number">4</span>, p)</span><br><span class="line">v = <span class="built_in">pow</span>(c, (q+<span class="number">1</span>)//<span class="number">4</span>, q)</span><br><span class="line"><span class="comment">#   sp+tq=1</span></span><br><span class="line">s = gmpy2.invert(p, q)   <span class="comment"># (p^-1) mod q</span></span><br><span class="line">t = gmpy2.invert(q, p)   <span class="comment"># (q^-1) mod p</span></span><br><span class="line">x = (t*q*u+s*p*v) % n</span><br><span class="line">y = (t*q*u-s*p*v) % n</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;m1 = &#x27;</span> + long_to_bytes(x % n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;m2 = &#x27;</span> + long_to_bytes((-x) % n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;m3 = &#x27;</span> + long_to_bytes(y % n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;m4 = &#x27;</span> + long_to_bytes((-y) % n))</span><br></pre></td></tr></table></div></figure><p>ÂæóÂà∞ÁªìÊûúÂ¶Ç‰∏ãÔºåm3Âç≥‰∏∫flag</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;m1 = kg\xe1\xe8u\x8b\x8b\xda\x04&gt;\xd8z&lt;l\xeby\xd9,1&lt;\x81\xc4\x1d0\x1e\xd8=\x82k\x1cr\x8bzP\x03S\xa1)\xf6\xf2\xdf\x87\xa8\x92\xfd\xf00\xfc\xf5(\xb3\x9e\xa3N\x87~\xf2\xab\xcdr\x1e\x04\xac\xaa\xdc\x90U\x0c\xdeC\x00\xe5oy\xb9\xc9\x1e~\xa5\x01=2\x86O\xbd&#125;\xc4\x1f8\x04g\x8c\xc2\x7f\xae\xf2 wX\xb1\xda#\\\xce\xb0\xde[\xf4\xd0\xe9MN\xb8\x93\xc4\xef\x17%g\xaf\x96I*\xdd\x9a\xc2\x8ec&#x27;</span><br><span class="line">b&#x27;m2 = 7\xf4\xc5\xad!6\x99\x9dO\xd6\xd6\xce?\x89\x02\xdc\xa8\x11\xb11\xb6Lga\xee\x89\x18n\xd8\x845\xb5\x922\x81\xa3\x01\x81\xbe3X\xd5E*\x1b\xc1o\xe4\x00\x04W\xfe\x88\xb8$\xadO\xd7\x9d\xc4\xcb\xee\xcd\x9a\xf0T\xc4\x18\x10\xc9#\x95f\xb01\xe9&#125;\x0b\x80u\xf4g\xd9\x92\xf0\x1bl\x8bd\xde\xcay\xc2Hj\xdb\x11&#125;[\xa1\xef\x86\xbf\xa2\xd3\xdf\xb5\x99\xe7\x13\rg\xe9\xc0*\xefO~\x87\x84\xf4V6\xef\x04\xbd\x8c\xfe&#x27;</span><br><span class="line">b&#x27;m3 = Aegis&#123;This_is_RABIN_not_RSA_though_similarity&#125;&#x27;</span><br><span class="line">b&#x27;m4 = \xa3\\\xa7\x95\x96\xc2%wT\x15\xafH&#123;\xf5\xeeV\x81=\xe2n8\x10\x84\x92\raU\xf1C\xa0\xa8A\x0c\x82\x84\xf6\xa2\xab\xb5&amp;8\\\xed\xbd\x19\xb1\xa0\xe0\xf5-\x0b\x9d,\x06\xac,B\x83k6\xe9\xf3zE\xcc\xe5\x19$\xef\x0c$z\xd6)\xeb\xb2\x9b\x8a%w1\x9a\x1e&#125;F/\xbd/Hz\xc8\x93%^\xa6m\xdf\xb3r\n&#123;J\xae\x02\x10^\xbf;v\x9c\xe6N2\xde\x88v\x070\x85\xc7!3\x00Z6\x0b\xa1\xe4&#x27;</span><br></pre></td></tr></table></div></figure>        <h2 id="LFSR"   >          <a href="#LFSR" class="heading-link"><i class="fas fa-link"></i></a><a href="#LFSR" class="headerlink" title="LFSR"></a>LFSR</h2>      <p>Ê∫ê‰ª£Á†ÅÔºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">b&quot;Aegis&#123;????????????????????????&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(flag)) == <span class="number">31</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parity</span>(<span class="params">x</span>):  <span class="comment"># Ê£ÄÈ™å‰∫åËøõÂà∂x‰∏≠1ÁöÑ‰∏™Êï∞ÔºåÂ•á‰∏∫1ÔºåÂÅ∂‰∏∫0</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> x:</span><br><span class="line">        x -= x &amp; (-x)</span><br><span class="line">        res ^= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LFSR</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, init, mask, length</span>):</span><br><span class="line">        <span class="keyword">assert</span>((mask &amp; (<span class="number">1</span> &lt;&lt; (length - <span class="number">1</span>))) != <span class="number">0</span>)</span><br><span class="line">        self.init = init</span><br><span class="line">        self.length = length</span><br><span class="line">        self.lengthmask = <span class="number">2</span> ** length - <span class="number">1</span></span><br><span class="line">        self.mask = mask &amp; self.lengthmask</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        nextdata = (self.init &lt;&lt; <span class="number">1</span>) &amp; self.lengthmask</span><br><span class="line">        output = parity(self.init &amp; self.mask)</span><br><span class="line">        nextdata ^= output</span><br><span class="line">        self.init = nextdata</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">secret = flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line">l = LFSR(<span class="built_in">int</span>(secret[:<span class="number">12</span>], <span class="number">16</span>), <span class="built_in">int</span>(secret[<span class="number">12</span>:], <span class="number">16</span>), <span class="number">48</span>)</span><br><span class="line">outstream = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">96</span>):</span><br><span class="line">    outstream &lt;&lt;= <span class="number">1</span></span><br><span class="line">    outstream |= l.<span class="built_in">next</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(outstream)[<span class="number">2</span>:])  <span class="comment"># 9375392d53d805407156b455</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>Â∏∏ËßÑÁöÑLFSRÈ¢òÁõÆÔºåÂàÜÊûê‰ª£Á†ÅÂèØÁü• $init$ Âíå $mask$ Âùá‰∏∫ $48bit$ </p><p>ËÄåÁªìÊûúÊâÄÁªôÁöÑ $outstream$ ‰∏∫ $96bit$ ÔºåÊÅ∞Â•Ω‰∏∫‰∏§ËΩÆÂä†ÂØÜÁöÑÈïøÂ∫¶</p><p>‚ë†Ââç $48bit$ ‰∏∫ $init$ Âä†ÂØÜÁªèËøá‰∏ÄËΩÆÂä†ÂØÜÊâÄÂæó</p><p>‚ë°Âêé $ 48bit$ ‰∏∫Ââç $48bit$ ÂÜçÁªèËøá‰∏ÄËΩÆÂä†ÂØÜÊâÄÂæó</p><p>Âà©Áî®Á¨¨‚ë°ÁÇπÂä†ÂØÜÂâçÂêéÂùáÂ∑≤Áü•Êàë‰ª¨ÂèØ‰ª•Ê±ÇÂæó $mask$ Ôºåsage‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def test(outstream):</span><br><span class="line">    s = [int(x) for x in outstream]</span><br><span class="line"></span><br><span class="line">    M = matrix(GF(2), 48, 48)</span><br><span class="line">    T = vector(GF(2), 48)</span><br><span class="line"></span><br><span class="line">    for i in range(len(s) - 48):</span><br><span class="line">        M[i] = s[i: i + 48]</span><br><span class="line">        T[i] = s[i + 48]</span><br><span class="line">    try:</span><br><span class="line">        mask = M.inverse() * T</span><br><span class="line">        return hex(int(&#x27;&#x27;.join(map(str, (mask))), base=2))</span><br><span class="line">    except:</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outstream = 0x9375392d53d805407156b455</span><br><span class="line">mask = test(bin(outstream)[2:])</span><br><span class="line">print(&#x27;mask = &#x27; + mask)</span><br></pre></td></tr></table></div></figure><p>ËøêË°åÁªìÊûúÔºö</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mask = 0xffbeefc0ff3e</span><br></pre></td></tr></table></div></figure><p>Ëß£Âæó $mask$ Âêé‰ª£ÂÖ•Á¨¨‚ë†ÁÇπÂç≥ÂèØËß£Âá∫ $init$ ÔºåÂ∞Ü $init$ Âíå $mask$ ÊãºËµ∑Êù•Âç≥ÂèØÂæóÂà∞flagÔºåsage‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools, hashlib, numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int2bin</span>(<span class="params">a, n</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> &lt;= n <span class="keyword">and</span> a &lt; <span class="number">2</span> ** n</span><br><span class="line">    res = np.zeros(n, dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        res[n - x - <span class="number">1</span>] = a % <span class="number">2</span></span><br><span class="line">        a = a // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> res.tolist()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bin2int</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x * <span class="number">2</span> + y, a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bitAnd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(a) == <span class="built_in">len</span>(b)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: <span class="built_in">int</span>(x) &amp; <span class="built_in">int</span>(y), a, b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">outstream</span>):</span><br><span class="line">    s = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> outstream]</span><br><span class="line"></span><br><span class="line">    M = matrix(GF(<span class="number">2</span>), <span class="number">48</span>, <span class="number">48</span>)</span><br><span class="line">    T = vector(GF(<span class="number">2</span>), <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s) - <span class="number">48</span>):</span><br><span class="line">        M[i] = s[i: i + <span class="number">48</span>]</span><br><span class="line">        T[i] = s[i + <span class="number">48</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mask = M.inverse() * T</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;mask = &#x27;</span> + <span class="built_in">hex</span>(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, (mask))), base=<span class="number">2</span>)))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    suf = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line">        <span class="keyword">if</span> bitAnd([<span class="number">0</span>] + suf + s[<span class="number">0</span>:<span class="number">47</span> - i], mask).count(<span class="number">1</span>) % <span class="number">2</span> == s[<span class="number">47</span> - i]:</span><br><span class="line">            suf = [<span class="number">0</span>] + suf</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            suf = [<span class="number">1</span>] + suf</span><br><span class="line"></span><br><span class="line">    key = <span class="built_in">hex</span>(bin2int(suf))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;init = &#x27;</span> + key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;The flag is Aegis&#123;&#x27;</span> + key + <span class="built_in">hex</span>(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, (mask))), base=<span class="number">2</span>)) + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">outstream = <span class="number">0x9375392d53d805407156b455</span></span><br><span class="line">test(<span class="built_in">bin</span>(outstream)[<span class="number">2</span>:])</span><br></pre></td></tr></table></div></figure><p>ËøêË°åÁªìÊûúÔºö</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mask = 0xffbeefc0ff3e</span><br><span class="line">init = a11ceb0bff0f</span><br><span class="line">The flag is Aegis&#123;a11ceb0bff0f0xffbeefc0ff3e&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="ezECC"   >          <a href="#ezECC" class="heading-link"><i class="fas fa-link"></i></a><a href="#ezECC" class="headerlink" title="ezECC"></a>ezECC</h2>      <p>Ê∫ê‰ª£Á†ÅÔºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">Point = namedtuple(<span class="string">&quot;Point&quot;</span>, <span class="string">&quot;x y&quot;</span>)</span><br><span class="line"></span><br><span class="line">O = <span class="string">&#x27;Origin&#x27;</span></span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">b&#x27;Aegis&#123;......&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_point</span>(<span class="params">P: <span class="built_in">tuple</span></span>):</span><br><span class="line">    <span class="keyword">if</span> P == O:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (P.y**<span class="number">2</span> - (P.x**<span class="number">3</span> + a*P.x + b)) % p == <span class="number">0</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= P.x &lt; p <span class="keyword">and</span> <span class="number">0</span> &lt;= P.y &lt; p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">point_inverse</span>(<span class="params">P: <span class="built_in">tuple</span></span>):</span><br><span class="line">    <span class="keyword">if</span> P == O:</span><br><span class="line">        <span class="keyword">return</span> P</span><br><span class="line">    <span class="keyword">return</span> Point(P.x, -P.y % p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">point_addition</span>(<span class="params">P: <span class="built_in">tuple</span>, Q: <span class="built_in">tuple</span></span>):</span><br><span class="line">    <span class="keyword">if</span> P == O:</span><br><span class="line">        <span class="keyword">return</span> Q</span><br><span class="line">    <span class="keyword">elif</span> Q == O:</span><br><span class="line">        <span class="keyword">return</span> P</span><br><span class="line">    <span class="keyword">elif</span> Q == point_inverse(P):</span><br><span class="line">        <span class="keyword">return</span> O</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> P == Q:</span><br><span class="line">            lam = (<span class="number">3</span>*P.x**<span class="number">2</span> + a)*inverse(<span class="number">2</span>*P.y, p)</span><br><span class="line">            lam %= p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lam = (Q.y - P.y) * inverse((Q.x - P.x), p)</span><br><span class="line">            lam %= p</span><br><span class="line">    Rx = (lam**<span class="number">2</span> - P.x - Q.x) % p</span><br><span class="line">    Ry = (lam*(P.x - Rx) - P.y) % p</span><br><span class="line">    R = Point(Rx, Ry)</span><br><span class="line">    <span class="keyword">assert</span> check_point(R)</span><br><span class="line">    <span class="keyword">return</span> R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">double_and_add</span>(<span class="params">P: <span class="built_in">tuple</span>, n: <span class="built_in">int</span></span>):</span><br><span class="line">    Q = P</span><br><span class="line">    R = O</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            R = point_addition(R, Q)</span><br><span class="line">        Q = point_addition(Q, Q)</span><br><span class="line">        n = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">assert</span> check_point(R)</span><br><span class="line">    <span class="keyword">return</span> R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_shared_secret</span>(<span class="params">Q: <span class="built_in">tuple</span>, n: <span class="built_in">int</span></span>):</span><br><span class="line">    S = double_and_add(Q, n)</span><br><span class="line">    <span class="keyword">return</span> S.x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_flag</span>(<span class="params">shared_secret: <span class="built_in">int</span></span>):</span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(<span class="built_in">str</span>(shared_secret).encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">    key = sha1.digest()[:<span class="number">16</span>]</span><br><span class="line">    iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    ciphertext = cipher.encrypt(pad(FLAG, <span class="number">16</span>))</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    data[<span class="string">&#x27;iv&#x27;</span>] = iv.<span class="built_in">hex</span>()</span><br><span class="line">    data[<span class="string">&#x27;encrypted_flag&#x27;</span>] = ciphertext.<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">310717010502520989590157367261876774703</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">g_x = <span class="number">179210853392303317793440285562762725654</span></span><br><span class="line">g_y = <span class="number">105268671499942631758568591033409611165</span></span><br><span class="line">G = Point(g_x, g_y)</span><br><span class="line"></span><br><span class="line">n = randint(<span class="number">1</span>, p)</span><br><span class="line"></span><br><span class="line">public = double_and_add(G, n)</span><br><span class="line"><span class="built_in">print</span>(public)</span><br><span class="line"></span><br><span class="line">b_x = <span class="number">272640099140026426377756188075937988094</span></span><br><span class="line">b_y = <span class="number">51062462309521034358726608268084433317</span></span><br><span class="line">B = Point(b_x, b_y)</span><br><span class="line"></span><br><span class="line">shared_secret = gen_shared_secret(B, n)</span><br><span class="line"></span><br><span class="line">ciphertext = encrypt_flag(shared_secret)</span><br><span class="line"><span class="built_in">print</span>(ciphertext)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>ÂàÜÊûê‰ª£Á†ÅÁü•ÈÅìËøôÊòØ‰∏ÄÈÅì ECC Âä† AES ÁöÑÈ¢òÁõÆÔºåÈ¶ñÂÖàËß£ÂÜ≥ECCÂæóÂà∞ $shared_secret$ ÔºåÁÑ∂ÂêéÂÜç‰ª£ÂÖ•AESËß£ÂØÜÂç≥ÂèØÔºå‰∏ãÈù¢ÊòØÂÖ∑‰ΩìËß£ÂÜ≥Ê≠•È™§</p><p>È¶ñÂÖàÂà©Áî®Pollig_HellmanÁÆóÊ≥ïÊ±ÇÂá∫nÔºö</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">p = 310717010502520989590157367261876774703</span><br><span class="line">a = 2</span><br><span class="line">b = 3</span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">K = (260053855577519367767956057258891222403, 179596564645843970846404853116641598439)</span><br><span class="line">G = (179210853392303317793440285562762725654, 105268671499942631758568591033409611165)</span><br><span class="line">K = E.point(K)</span><br><span class="line">G = E.point(G)</span><br><span class="line"></span><br><span class="line"># primes‰∏≠‰∏∫ÁÇπGÁöÑÈò∂ÁöÑË¥®Âõ†Êï∞ÂàÜËß£</span><br><span class="line">primes = [2, 3**7, 139, 165229, 31850531, 270778799, 179317983307]</span><br><span class="line">dlogs = []</span><br><span class="line">for fac in primes:</span><br><span class="line">    t = int(G.order()) // int(fac)</span><br><span class="line">    dlog = discrete_log(t*K, t*G, operation=&#x27;+&#x27;)</span><br><span class="line">    dlogs += [dlog]</span><br><span class="line">    print(str(fac) + &#x27;,&#x27; + str(dlog))</span><br><span class="line">n = crt(dlogs, primes)</span><br><span class="line">print(&#x27;n = &#x27; + str(n))</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n = 1735615609077661663789047116578013247</span><br></pre></td></tr></table></div></figure><p>ÂÜçÂà©Áî®Ê±ÇÂá∫ÁöÑ $ n $ ËÆ°ÁÆó $nB$ ÂæóÂà∞ $shared_secret$ Ôºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b_x = <span class="number">272640099140026426377756188075937988094</span></span><br><span class="line">b_y = <span class="number">51062462309521034358726608268084433317</span></span><br><span class="line">B = Point(b_x, b_y)</span><br><span class="line">shared_secret = gen_shared_secret(B, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;shared_secret = &quot;</span> + <span class="built_in">str</span>(shared_secret))</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shared_secret = 80834286993107767130878144281867395240</span><br></pre></td></tr></table></div></figure><p>ÂæóÂà∞ $shared_secret$ ÂêéÂèØ‰ª•ÂæóÂà∞AESÂä†ÂØÜ‰∏≠ÁöÑkeyÔºåÁªìÂêàÊâÄÁªôÁöÑivÔºåÂ∞Ü $ciphertext$ Ëß£ÂØÜÂç≥ÂèØÂæóÂà∞ $flag$ Ôºö</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sha1 = hashlib.sha1()</span><br><span class="line">sha1.update(<span class="built_in">str</span>(shared_secret).encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">key = sha1.digest()[:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line">iv = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;45879e81ea63153f4dbc94603cbf6ebc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">plaintext = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;db9741d44b9d1718bb9e47b7584795e1f09169119a6d5bafe6fe6a6b950e5669f64ec7057f21711c4e896d4a65de20af&#x27;</span>)</span><br><span class="line">flag = unpad(cipher.decrypt(plaintext), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;Aegis&#123;07e2628b590095a5e332d397b8a59aa7&#125;&#x27;</span><br></pre></td></tr></table></div></figure><p>ÂÆåÊï¥‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Cipher import AES</span><br><span class="line">from Crypto.Util.number import inverse</span><br><span class="line">from Crypto.Util.Padding import pad, unpad</span><br><span class="line">from collections import namedtuple</span><br><span class="line">from random import randint</span><br><span class="line">import hashlib</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">Point = namedtuple(&quot;Point&quot;, &quot;x y&quot;)</span><br><span class="line"></span><br><span class="line">O = &#x27;Origin&#x27;</span><br><span class="line"></span><br><span class="line">def check_point(P: tuple):</span><br><span class="line">    if P == O:</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return (P.y**2 - (P.x**3 + a*P.x + b)) % p == 0 and 0 &lt;= P.x &lt; p and 0 &lt;= P.y &lt; p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def point_inverse(P: tuple):</span><br><span class="line">    if P == O:</span><br><span class="line">        return P</span><br><span class="line">    return Point(P.x, -P.y % p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def point_addition(P: tuple, Q: tuple):</span><br><span class="line">    if P == O:</span><br><span class="line">        return Q</span><br><span class="line">    elif Q == O:</span><br><span class="line">        return P</span><br><span class="line">    elif Q == point_inverse(P):</span><br><span class="line">        return O</span><br><span class="line">    else:</span><br><span class="line">        if P == Q:</span><br><span class="line">            lam = (3*P.x**2 + a)*inverse(2*P.y, p)</span><br><span class="line">            lam %= p</span><br><span class="line">        else:</span><br><span class="line">            lam = (Q.y - P.y) * inverse((Q.x - P.x), p)</span><br><span class="line">            lam %= p</span><br><span class="line">    Rx = (lam**2 - P.x - Q.x) % p</span><br><span class="line">    Ry = (lam*(P.x - Rx) - P.y) % p</span><br><span class="line">    R = Point(Rx, Ry)</span><br><span class="line">    assert check_point(R)</span><br><span class="line">    return R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def double_and_add(P: tuple, n: int):</span><br><span class="line">    Q = P</span><br><span class="line">    R = O</span><br><span class="line">    while n &gt; 0:</span><br><span class="line">        if n % 2 == 1:</span><br><span class="line">            R = point_addition(R, Q)</span><br><span class="line">        Q = point_addition(Q, Q)</span><br><span class="line">        n = n // 2</span><br><span class="line">    assert check_point(R)</span><br><span class="line">    return R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def gen_shared_secret(Q: tuple, n: int):</span><br><span class="line">    S = double_and_add(Q, n)</span><br><span class="line">    return S.x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = 310717010502520989590157367261876774703</span><br><span class="line">a = 2</span><br><span class="line">b = 3</span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">K = (260053855577519367767956057258891222403, 179596564645843970846404853116641598439)</span><br><span class="line">G = (179210853392303317793440285562762725654, 105268671499942631758568591033409611165)</span><br><span class="line">K = E.point(K)</span><br><span class="line">G = E.point(G)</span><br><span class="line"></span><br><span class="line">primes = [2, 3**7, 139, 165229, 31850531, 270778799, 179317983307]</span><br><span class="line">dlogs = []</span><br><span class="line">for fac in primes:</span><br><span class="line">    t = int(G.order()) // int(fac)</span><br><span class="line">    dlog = discrete_log(t*K, t*G, operation=&#x27;+&#x27;)</span><br><span class="line">    dlogs += [dlog]</span><br><span class="line">    print(str(fac) + &#x27;,&#x27; + str(dlog))</span><br><span class="line">n = crt(dlogs, primes)</span><br><span class="line"></span><br><span class="line">b_x = 272640099140026426377756188075937988094</span><br><span class="line">b_y = 51062462309521034358726608268084433317</span><br><span class="line">B = Point(b_x, b_y)</span><br><span class="line">shared_secret = gen_shared_secret(B, n)</span><br><span class="line"></span><br><span class="line">sha1 = hashlib.sha1()</span><br><span class="line">sha1.update(str(shared_secret).encode(&#x27;ascii&#x27;))</span><br><span class="line">key = sha1.digest()[:16]</span><br><span class="line"></span><br><span class="line">iv = bytes.fromhex(&#x27;45879e81ea63153f4dbc94603cbf6ebc&#x27;)</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">plaintext = bytes.fromhex(&#x27;db9741d44b9d1718bb9e47b7584795e1f09169119a6d5bafe6fe6a6b950e5669f64ec7057f21711c4e896d4a65de20af&#x27;)</span><br><span class="line">flag = unpad(cipher.decrypt(plaintext), 16)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h1 id=&quot;AegisÊãõÊñ∞È¢ò-crypto-writeup&quot;   &gt;
          &lt;a href=&quot;#AegisÊãõÊñ∞È¢ò-crypto-writeup&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://freeman-cc.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>NTRUÁÆóÊ≥ïËØ¶Ëß£</title>
    <link href="https://freeman-cc.github.io/2022/04/09/NTRU%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>https://freeman-cc.github.io/2022/04/09/NTRU%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-04-09T06:17:00.000Z</published>
    <updated>2022-04-10T06:06:25.833Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="NTRUÁÆóÊ≥ïËØ¶Ëß£"   >          <a href="#NTRUÁÆóÊ≥ïËØ¶Ëß£" class="heading-link"><i class="fas fa-link"></i></a><a href="#NTRUÁÆóÊ≥ïËØ¶Ëß£" class="headerlink" title="NTRUÁÆóÊ≥ïËØ¶Ëß£"></a>NTRUÁÆóÊ≥ïËØ¶Ëß£</h1>              <h2 id="ÁÆóÊ≥ïËÉåÊôØ"   >          <a href="#ÁÆóÊ≥ïËÉåÊôØ" class="heading-link"><i class="fas fa-link"></i></a><a href="#ÁÆóÊ≥ïËÉåÊôØ" class="headerlink" title="ÁÆóÊ≥ïËÉåÊôØ"></a>ÁÆóÊ≥ïËÉåÊôØ</h2>      <pre><code>    NTRUÊòØHoffstem„ÄÅPipherÂíåsilvermanÂú®1998Âπ¥ÊèêÂá∫ÁöÑ‰∏ÄÁßçÊñ∞ÁöÑÂÖ¨Èí•ÂØÜÁ†Å‰ΩìÂà∂„ÄÇËØ•‰ΩìÂà∂ÊòØÂª∫Á´ãÂú®Â§öÈ°πÂºèÁéØÁöÑÂü∫Á°Ä‰πã‰∏äÁöÑÔºåÂÖ∂ÂÆâÂÖ®ÊÄßÂü∫‰∫éÊ†º‰∏äÊúÄÁü≠ÂêëÈáèÈóÆÈ¢òÔºåÂèØ‰ª•ÊúâÊïàÊäµÊäóShorÁÆóÊ≥ï„ÄÇÁî±‰∫éNTRUËøêÁÆóÁÆÄÊ¥ÅÂø´ÈÄüÔºå‰∏éÁõÆÂâçÂπøÊ≥õ‰ΩøÁî®ÁöÑÂÖ¨Èí•ÂØÜÁ†ÅÁ≥ªÁªüRSAÂèäÊ§≠ÂúÜÊõ≤Á∫øÂØÜÁ†ÅÁ≥ªÁªüÁõ∏ÊØîËæÉÔºåÂú®ÂÆâÂÖ®Ë¶ÅÊ±ÇÁõ∏ÂêåÁöÑÊÉÖÂÜµ‰∏ãÔºåNTRU‰∫ßÁîüÂØÜÈí•ÂØπÊõ¥Âø´ÔºåÂú®Âä†ÂØÜÂíåËß£ÂØÜÊïàÁéá‰∏ä‰πüÂÖ∑Êúâ‰∏ÄÂÆöÁöÑ‰ºòÂäø„ÄÇ‰ΩÜNTRUÁöÑÂéüÂßãÊñπÊ°àÁöÑÂÆâÂÖ®ÊÄß‰∏ÄÁõ¥Ê≤°ÊúâÂæóÂà∞‰∏•Ê†ºÁöÑËØÅÊòé„ÄÇ    2011Âπ¥ÔºåStehle DÔºåSteinfeldRÂú®ÁêÜÊÉ≥Ê†º‰∏äÂü∫‰∫éR-LWEÈóÆÈ¢òÊûÑÈÄ†‰∫ÜÈÄâÊã©ÊòéÊñáÊîªÂáªÂÆâÂÖ®ÁöÑNTRUÂä†ÂØÜ‰ΩìÂà∂„ÄÇ2012Âπ¥ÔºåRon SteinfeldÁ≠â‰∫∫Âú®ÁêÜÊÉ≥Ê†º‰∏äÊèêÂá∫‰∫ÜÈÄâÊã©ÂØÜÊñáÊîªÂáªÂÆâÂÖ®ÁöÑNTRUÂä†ÂØÜ‰ΩìÂà∂„ÄÇ</code></pre>        <h2 id="ÁÆóÊ≥ïÊµÅÁ®ã"   >          <a href="#ÁÆóÊ≥ïÊµÅÁ®ã" class="heading-link"><i class="fas fa-link"></i></a><a href="#ÁÆóÊ≥ïÊµÅÁ®ã" class="headerlink" title="ÁÆóÊ≥ïÊµÅÁ®ã"></a>ÁÆóÊ≥ïÊµÅÁ®ã</h2>      <p><img src=":/56283e34652f416aa83ba60b4c515dc8" alt="45454f65d2ae336cbc09c4e8178e8769.png"></p>        <h3 id="ÂèÇÊï∞ÈÄâÂèñ"   >          <a href="#ÂèÇÊï∞ÈÄâÂèñ" class="heading-link"><i class="fas fa-link"></i></a><a href="#ÂèÇÊï∞ÈÄâÂèñ" class="headerlink" title="ÂèÇÊï∞ÈÄâÂèñ"></a>ÂèÇÊï∞ÈÄâÂèñ</h3>      <p>NÔºöÊ¨°Êï∞ÂèÇÊï∞ÔºåÁ¥†Êï∞</p><p>qÔºöÂ§ßÊ®°Êï∞ÔºåÊ≠£Êï¥Êï∞</p><p>pÔºöÂ∞èÊ®°Êï∞ÔºåÂ•áÁ¥†Êï∞ÊàñÂ§öÈ°πÂºè</p><p>dÔºöÁî®Êù•ÈôêÂà∂Èùû0Á≥ªÊï∞ÁöÑ‰∏™Êï∞ÔºåÊ≠£Êï¥Êï∞</p><p>f(x)ÔºöÊ®°Â§öÈ°πÂºèÔºåNÊ¨°Êï¥Á≥ªÊï∞Â§öÈ°πÂºèÔºåÂ∞ÜÊ†º$Z^N$ÊûÑÈÄ†‰∏∫ÁéØ$Z[x]/f(x)$</p><p>ÁªèÂÖ∏ÂèÇÊï∞ÂÄºÔºö</p><script type="math/tex; mode=display">(NÔºåqÔºåpÔºådÔºåf(x))=(251Ôºå256Ôºå3Ôºå72Ôºåx^N-1)</script>        <h3 id="ÂØÜÈí•ÁîüÊàê"   >          <a href="#ÂØÜÈí•ÁîüÊàê" class="heading-link"><i class="fas fa-link"></i></a><a href="#ÂØÜÈí•ÁîüÊàê" class="headerlink" title="ÂØÜÈí•ÁîüÊàê"></a>ÂØÜÈí•ÁîüÊàê</h3>      <p>ÂÖ¨Èí•Ôºö$(N, p, q, h(x))<br>$</p><p>ÁßÅÈí•Ôºö$(f(x), f_{p}^{-1}(x))$</p><ol><li><p><strong>ÁîüÊàê$f(x),f_{q}^{-1}(x),f_{p}^{-1}(x)$</strong></p><p>Ôºà1ÔºâÂú®Ê†º$Z[x]$‰∏äÈÄâÂèñÂ§öÈ°πÂºè$f(x)$ÔºåÊª°Ë∂≥$f(x)$ÁöÑÊ¨°Êï∞‰∏çË∂ÖËøáN-1ÔºåÁ≥ªÊï∞‰∏∫$\{-1, 0, 1\}$‰∏≠ÁöÑÂÄºÔºå‰∏îÊúâd+1‰∏™Á≥ªÊï∞‰∏∫1Ôºåd‰∏™Á≥ªÊï∞‰∏∫-1ÔºåÂÖ∂‰ªñÁ≥ªÊï∞‰∏∫0„ÄÇ</p><p>Ôºà2ÔºâÊ£ÄÈ™å$f(x)$Âú®ÁéØ$Z_q[x]/f(x)$‰∏äÊòØÂê¶ÂèØÈÄÜÔºåÂ¶ÇÊûúÂèØÈÄÜÂàôËÆ°ÁÆóÈÄÜÂÖÉ$f_{q}^{-1}(x)$</p><p>Ôºà3ÔºâÊ£ÄÈ™å$f(x)$Âú®ÁéØ$Z_p[x]/f(x)$‰∏äÊòØÂê¶ÂèØÈÄÜÔºåÂ¶ÇÊûúÂèØÈÄÜÂàôËÆ°ÁÆóÈÄÜÂÖÉ$f_{p}^{-1}(x)$</p><p>ÈáçÂ§ç‰∏äËø∞Ê≠•È™§ÔºåÁõ¥Ëá≥ÂæóÂà∞$(f_{q}^{-1}(x), f_{p}^{-1}(x))$</p></li><li><p><strong>ÁîüÊàê</strong>$g(x)$</p><p>Âú®Ê†ºZ[x]‰∏äÈÄâÂèñÂ§öÈ°πÂºè$f(x)$ÔºåÊª°Ë∂≥$f(x)$ÁöÑÊ¨°Êï∞‰∏çË∂ÖËøáN-1ÔºåÁ≥ªÊï∞‰∏∫$\{-1, 0, 1\}$‰∏≠ÁöÑÂÄºÔºå‰∏îÊúâd+1‰∏™Á≥ªÊï∞‰∏∫1Ôºåd‰∏™Á≥ªÊï∞‰∏∫-1ÔºåÂÖ∂‰ªñÁ≥ªÊï∞‰∏∫0</p></li><li><p><strong>ËÆ°ÁÆó</strong>$h(x)$</p></li></ol><script type="math/tex; mode=display">h(x) \equiv pg(x)f_{q}^{-1}(x) \pmod{q}</script>        <h3 id="Âä†ÂØÜÈò∂ÊÆµ"   >          <a href="#Âä†ÂØÜÈò∂ÊÆµ" class="heading-link"><i class="fas fa-link"></i></a><a href="#Âä†ÂØÜÈò∂ÊÆµ" class="headerlink" title="Âä†ÂØÜÈò∂ÊÆµ"></a>Âä†ÂØÜÈò∂ÊÆµ</h3>      <ol><li><p>Â∞ÜÊòéÊñáÁºñÁ†Å‰∏∫Á≥ªÊï∞Â±û‰∫é$\{-1,0,1\}$ÁöÑÂ§öÈ°πÂºè$m(x)$ÔºåÊòéÊñáÁ©∫Èó¥Âç≥‰∏∫$\mathcal{M}=\{-1,0,1\}^N$ÔºõÂêåÊó∂ÔºåÂú®ÂèÇÊï∞ÈÄâÂèñ‰∏∫$(p,f(x))=(3,x^N-1)$Êó∂ÔºåÊúâ$\mathcal{M}=Z_p[x]/f(x)$</p></li><li><p>ÈöèÊú∫ÈÄâÂèñÂ§öÈ°πÂºè$r(x) \in Z_p[x]/f(x)$</p></li><li><p>ËÆ°ÁÆóÂØÜÊñá</p></li></ol><script type="math/tex; mode=display">e(x) = r(x)h(x) + m(x) \pmod{q}</script>        <h3 id="Ëß£ÂØÜÈò∂ÊÆµ"   >          <a href="#Ëß£ÂØÜÈò∂ÊÆµ" class="heading-link"><i class="fas fa-link"></i></a><a href="#Ëß£ÂØÜÈò∂ÊÆµ" class="headerlink" title="Ëß£ÂØÜÈò∂ÊÆµ"></a>Ëß£ÂØÜÈò∂ÊÆµ</h3>      <ol><li>È¶ñÂÖàËÆ°ÁÆóÔºöÔºàÊ≠§Â§ÑÁúÅÁï•‰∫ÜÂ§öÈ°πÂºèÂêéÁöÑ(x)Ôºâ</li></ol><script type="math/tex; mode=display">\begin{aligned}a   &\equiv f*e \pmod{q} \\    &\equiv f*(r*h+m) \pmod{q} \\    &\equiv f*(r*p*g*f_{q}^{-1}+m) \pmod{q} \\    &\equiv r*p*g + f*m \pmod{q}\end{aligned}</script><pre><code>Âõ†‰∏∫$r(x),g(x),f(x),m(x)$ÁöÑÁ≥ªÊï∞ÈÉΩËæÉÂ∞èÔºåÊïÖ‰∏äËø∞ËÆ°ÁÆóÊâÄÂæóÂà∞ÁöÑ‰∏∫ÊÅíÁ≠âÂºè</code></pre><script type="math/tex; mode=display">a = r*p*g + f*m \quad in \ Z^N</script><pre><code>ËÄåÈùûÂêå‰ΩôÂºè</code></pre><script type="math/tex; mode=display">a \equiv r*p*g + f*m \pmod{q}</script><ol><li>Êé•‰∏ãÊù•ËÆ°ÁÆóÔºö</li></ol><script type="math/tex; mode=display">\begin{aligned}b   &\equiv a*f_{p}^{-1} \pmod{p} \\    &\equiv (r*g + f*m)*f_{p}^{-1} \pmod{p} \\    &\equiv r*p*g*f_{p}^{-1} + m \pmod{p} \\    &\equiv m \pmod{p}\end{aligned}</script><ol><li><p>ÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØÔºå1‰∏≠ÂÆûÈôÖ‰∏ä‰∏∫Ê¶ÇÁéáÊÄßÁÆóÊ≥ïÔºåÊ¶ÇÁéá‰∏éqÁöÑÂèñÂÄºÊúâÂÖ≥ÔºåÁªÜËäÇËßÅ‰∏ãÂõæÔºö</p><p><img src="https://img2020.cnblogs.com/blog/1169376/202003/1169376-20200331095438297-372265146.png" alt=""></p></li></ol>        <h2 id="Áü•ËØÜË°•ÂÖÖ"   >          <a href="#Áü•ËØÜË°•ÂÖÖ" class="heading-link"><i class="fas fa-link"></i></a><a href="#Áü•ËØÜË°•ÂÖÖ" class="headerlink" title="Áü•ËØÜË°•ÂÖÖ"></a>Áü•ËØÜË°•ÂÖÖ</h2>      <blockquote><p>Ëøô‰∏ÄÈÉ®ÂàÜ‰∏ªË¶Å‰∏∫Âú®‰ª£Á†ÅÂÆûÁé∞Êó∂ÊâÄË¶ÅÁî®Âà∞ÁöÑÁÆóÊ≥ï</p></blockquote><p><strong>‰∏≠ÂøÉÂåñÂ§ÑÁêÜÂèñÊ®°</strong></p><p>‰∏≠ÂøÉÂåñÂ§ÑÁêÜÔºåÂç≥Ê®°qËøêÁÆóÊàñÊ®°pËøêÁÆóÁöÑÁªìÊûú‰ª•0‰∏∫‰∏≠ÂøÉ„ÄÇ</p><p>ÊØîÂ¶ÇÊ®°3ËøêÁÆóÁöÑÁªìÊûúÂ±û‰∫é$\{-1Ôºå0Ôºå1\}$ËÄå‰∏çÊòØ$\{0Ôºå1Ôºå2\}$,<br>Ê®°256ËøêÁÆóÁöÑÁªìÊûúÂ±û‰∫é$\{-127Ôºå-126Ôºå‚Ä¶Ôºå128\}$ËÄå‰∏çÊòØ$\{0Ôºå1‚Ä¶Ôºå255\}$„ÄÇ</p><p>ËøôÊ†∑ÁöÑ‰∏≠ÂøÉÂåñÂ§ÑÁêÜÂú®‰ª£Êï∞‰∏äÊ≤°Êúâ‰ªª‰Ωï‰∏çÂêåÔºå‰ΩÜ‰ΩøÂæóÂ∞∫ÂØ∏ÂèòÂ∞è‰∫Ü„ÄÇÁéØ$Z_q[x]/f(x)$ÂíåÁéØ$Z_p[x]/f(x)$ÈÉΩÁªèËøáËøôÊ†∑ÁöÑ‰∏≠ÂøÉÂåñÂ§ÑÁêÜ„ÄÇ</p><p><strong>Â∞ÜÊòéÊñáÁºñÁ†Å‰∏∫Â§öÈ°πÂºè</strong></p><p>ËøòÊ≤°ÊâæÂà∞ÂêàÈÄÇÁöÑÁÆóÊ≥ï‚Ä¶‚Ä¶</p><p><strong>Âà§Êñ≠Â§öÈ°πÂºèÊòØÂê¶ÂèØÈÄÜ</strong></p><p>ËßÅ<span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/pam-sh/p/14253393.html#_label1_2" >NTRU - PamShao - ÂçöÂÆ¢Âõ≠</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>ÊàñËÆ∫Êñá„ÄäNTRU‰∏≠Â§öÈ°πÂºèÁöÑÈÄÜÈóÆÈ¢ò„Äã</p><p><strong>Â§öÈ°πÂºèÂç∑ÁßØËÆ°ÁÆó‰∏éÂø´ÈÄüÂç∑ÁßØ</strong></p><p>ËÆæ$a(x), b(x), c(x) \in Z^N/f(x)$ÔºåÂÖ∂‰∏≠$c(x)$‰∏∫a(x)‰∏éb(x)ÁöÑÂç∑ÁßØËÆ°ÁÆóÁªìÊûúÔºåËÆ∞‰Ωú</p><script type="math/tex; mode=display">c(x) = a(x) \otimes b(x)</script><p>Â∞Ü‰∏äËø∞Â§öÈ°πÂºèË°®Á§∫‰∏∫ÂêëÈáèÂΩ¢ÂºèÔºåÂ¶Ç‰∏ãÔºö</p><script type="math/tex; mode=display">\begin{aligned}a &= (a_0, a_1, a_2, \cdots, a_{N-1}) \\b &= (b_0, b_1, b_2, \cdots, b_{N-1}) \\c &= (c_0, c_1, c_2, \cdots, c_{N-1})\end{aligned}</script><p>Áî±‰∫é$X^N \equiv 1 \pmod{X^N -1}$ÔºåÊïÖ‰πòÁßØÂêéÊúâ$X^{N+i} \equiv X^i \pmod{X^N -1}$ÔºåËøõËÄåÂèØ‰ª•ÂæóÂà∞Ôºö</p><script type="math/tex; mode=display">c_k = \sum_{i+j \equiv k \mod{N}} a_i b_j</script><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/yu132563/article/details/52658106" >Âø´ÈÄüÂç∑ÁßØÁÆóÊ≥ï</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h1 id=&quot;NTRUÁÆóÊ≥ïËØ¶Ëß£&quot;   &gt;
          &lt;a href=&quot;#NTRUÁÆóÊ≥ïËØ¶Ëß£&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#NTRUÁÆóÊ≥ïËØ¶Ëß£&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://freeman-cc.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://freeman-cc.github.io/2022/04/09/hello-world/"/>
    <id>https://freeman-cc.github.io/2022/04/09/hello-world/</id>
    <published>2022-04-09T05:33:59.201Z</published>
    <updated>2022-04-10T05:52:55.086Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <span class="exturl"><a class="exturl__link"   href="https://hexo.io/" >Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>! This is your very first post. Check <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/" >documentation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> or you can ask me on <span class="exturl"><a class="exturl__link"   href="https://github.com/hexojs/hexo/issues" >GitHub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>.</p>        <h2 id="Quick-Start"   >          <a href="#Quick-Start" class="heading-link"><i class="fas fa-link"></i></a><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2>              <h3 id="Create-a-new-post"   >          <a href="#Create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/writing.html" >Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Run-server"   >          <a href="#Run-server" class="heading-link"><i class="fas fa-link"></i></a><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/server.html" >Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Generate-static-files"   >          <a href="#Generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/generating.html" >Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Deploy-to-remote-sites"   >          <a href="#Deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-ex</summary>
      
    
    
    
    
  </entry>
  
</feed>
